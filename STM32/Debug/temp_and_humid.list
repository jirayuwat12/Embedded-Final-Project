
temp_and_humid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005994  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005b38  08005b38  00015b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc0  08005bc0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc8  08005bc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc8  08005bc8  00015bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bcc  08005bcc  00015bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000070  08005c40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08005c40  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d87a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5c  00000000  00000000  0002d91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0002f578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  000301d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015958  00000000  00000000  00030d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc50  00000000  00000000  000466e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4fe  00000000  00000000  00054338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df836  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce4  00000000  00000000  000df888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b1c 	.word	0x08005b1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005b1c 	.word	0x08005b1c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468e      	mov	lr, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14d      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4694      	mov	ip, r2
 8000bda:	d969      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b152      	cbz	r2, 8000bf8 <__udivmoddi4+0x30>
 8000be2:	fa01 f302 	lsl.w	r3, r1, r2
 8000be6:	f1c2 0120 	rsb	r1, r2, #32
 8000bea:	fa20 f101 	lsr.w	r1, r0, r1
 8000bee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bf6:	4094      	lsls	r4, r2
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000c02:	fa1f f78c 	uxth.w	r7, ip
 8000c06:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c0e:	fb06 f107 	mul.w	r1, r6, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 811f 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 811c 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 f707 	mul.w	r7, r0, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x92>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	f080 810a 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	f240 8107 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c56:	4464      	add	r4, ip
 8000c58:	3802      	subs	r0, #2
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	1be4      	subs	r4, r4, r7
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa4>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80ef 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80f9 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e0      	beq.n	8000c6c <__udivmoddi4+0xa4>
 8000caa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cae:	e7dd      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8092 	bne.w	8000de2 <__udivmoddi4+0x21a>
 8000cbe:	eba1 010c 	sub.w	r1, r1, ip
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2601      	movs	r6, #1
 8000ccc:	0c20      	lsrs	r0, r4, #16
 8000cce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000d00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2ca>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79c      	b.n	8000c62 <__udivmoddi4+0x9a>
 8000d28:	f1c6 0720 	rsb	r7, r6, #32
 8000d2c:	40b3      	lsls	r3, r6
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	40f9      	lsrs	r1, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d4e:	0c20      	lsrs	r0, r4, #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fb09 1118 	mls	r1, r9, r8, r1
 8000d58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d60:	4288      	cmp	r0, r1
 8000d62:	fa02 f206 	lsl.w	r2, r2, r6
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d88:	fb09 1110 	mls	r1, r9, r0, r1
 8000d8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d94:	458e      	cmp	lr, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	458e      	cmp	lr, r1
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9402 	umull	r9, r4, r0, r2
 8000db2:	eba1 010e 	sub.w	r1, r1, lr
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46a6      	mov	lr, r4
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x212>
 8000dc2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dca:	fa01 f707 	lsl.w	r7, r1, r7
 8000dce:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd2:	40f1      	lsrs	r1, r6
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4091      	lsls	r1, r2
 8000df2:	4301      	orrs	r1, r0
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e00:	fb07 3610 	mls	r6, r7, r0, r3
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	429e      	cmp	r6, r3
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e30:	fb07 3316 	mls	r3, r7, r6, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb06 f30e 	mul.w	r3, r6, lr
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3e02      	subs	r6, #2
 8000e50:	4461      	add	r1, ip
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e705      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e3      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f8      	b.n	8000c5a <__udivmoddi4+0x92>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4646      	mov	r6, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e709      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x156>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	0000      	movs	r0, r0
	...

08000ea0 <HAL_UART_RxCpltCallback>:
uint8_t drank_arr[20];
uint8_t dw;
uint8_t i;
uint8_t out = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	//HAL_UART_Transmit(huart&2, drank_water, sizeof(drank_water),100);
	HAL_UART_Receive_IT(huart, &drank_water_bit, sizeof(drank_water_bit));
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	495d      	ldr	r1, [pc, #372]	; (8001020 <HAL_UART_RxCpltCallback+0x180>)
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f002 fae2 	bl	8003476 <HAL_UART_Receive_IT>

	if(drank_water_bit == '-'){
 8000eb2:	4b5b      	ldr	r3, [pc, #364]	; (8001020 <HAL_UART_RxCpltCallback+0x180>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b2d      	cmp	r3, #45	; 0x2d
 8000eb8:	d115      	bne.n	8000ee6 <HAL_UART_RxCpltCallback+0x46>
		out = 1;
 8000eba:	4b5a      	ldr	r3, [pc, #360]	; (8001024 <HAL_UART_RxCpltCallback+0x184>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
		Water = 0;
 8000ec0:	4b59      	ldr	r3, [pc, #356]	; (8001028 <HAL_UART_RxCpltCallback+0x188>)
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2101      	movs	r1, #1
 8000ecc:	4857      	ldr	r0, [pc, #348]	; (800102c <HAL_UART_RxCpltCallback+0x18c>)
 8000ece:	f001 fa0d 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	4856      	ldr	r0, [pc, #344]	; (8001030 <HAL_UART_RxCpltCallback+0x190>)
 8000ed8:	f001 fa08 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4853      	ldr	r0, [pc, #332]	; (8001030 <HAL_UART_RxCpltCallback+0x190>)
 8000ee2:	f001 fa03 	bl	80022ec <HAL_GPIO_WritePin>
	}
	if(drank_water_bit != '/'){
 8000ee6:	4b4e      	ldr	r3, [pc, #312]	; (8001020 <HAL_UART_RxCpltCallback+0x180>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b2f      	cmp	r3, #47	; 0x2f
 8000eec:	d01c      	beq.n	8000f28 <HAL_UART_RxCpltCallback+0x88>
		if(out == 0){
 8000eee:	4b4d      	ldr	r3, [pc, #308]	; (8001024 <HAL_UART_RxCpltCallback+0x184>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f040 808a 	bne.w	800100c <HAL_UART_RxCpltCallback+0x16c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2101      	movs	r1, #1
 8000efc:	484c      	ldr	r0, [pc, #304]	; (8001030 <HAL_UART_RxCpltCallback+0x190>)
 8000efe:	f001 f9f5 	bl	80022ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2102      	movs	r1, #2
 8000f06:	484a      	ldr	r0, [pc, #296]	; (8001030 <HAL_UART_RxCpltCallback+0x190>)
 8000f08:	f001 f9f0 	bl	80022ec <HAL_GPIO_WritePin>
			drank_arr[i] = drank_water_bit;
 8000f0c:	4b49      	ldr	r3, [pc, #292]	; (8001034 <HAL_UART_RxCpltCallback+0x194>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b43      	ldr	r3, [pc, #268]	; (8001020 <HAL_UART_RxCpltCallback+0x180>)
 8000f14:	7819      	ldrb	r1, [r3, #0]
 8000f16:	4b48      	ldr	r3, [pc, #288]	; (8001038 <HAL_UART_RxCpltCallback+0x198>)
 8000f18:	5499      	strb	r1, [r3, r2]
			i++;
 8000f1a:	4b46      	ldr	r3, [pc, #280]	; (8001034 <HAL_UART_RxCpltCallback+0x194>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b44      	ldr	r3, [pc, #272]	; (8001034 <HAL_UART_RxCpltCallback+0x194>)
 8000f24:	701a      	strb	r2, [r3, #0]
			out = 0;
		}
	}


}
 8000f26:	e071      	b.n	800100c <HAL_UART_RxCpltCallback+0x16c>
		if(out == 0){
 8000f28:	4b3e      	ldr	r3, [pc, #248]	; (8001024 <HAL_UART_RxCpltCallback+0x184>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d16a      	bne.n	8001006 <HAL_UART_RxCpltCallback+0x166>
			i--;
 8000f30:	4b40      	ldr	r3, [pc, #256]	; (8001034 <HAL_UART_RxCpltCallback+0x194>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b3e      	ldr	r3, [pc, #248]	; (8001034 <HAL_UART_RxCpltCallback+0x194>)
 8000f3a:	701a      	strb	r2, [r3, #0]
			uint8_t p=0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
			while(i>=0 && drank_arr[i]<='9' && drank_arr[i] >= '0'){
 8000f40:	e03e      	b.n	8000fc0 <HAL_UART_RxCpltCallback+0x120>
				dw += (drank_arr[i]-'0') * pow(10,p);
 8000f42:	4b3c      	ldr	r3, [pc, #240]	; (8001034 <HAL_UART_RxCpltCallback+0x194>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b3b      	ldr	r3, [pc, #236]	; (8001038 <HAL_UART_RxCpltCallback+0x198>)
 8000f4a:	5c9b      	ldrb	r3, [r3, r2]
 8000f4c:	3b30      	subs	r3, #48	; 0x30
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fae8 	bl	8000524 <__aeabi_i2d>
 8000f54:	4604      	mov	r4, r0
 8000f56:	460d      	mov	r5, r1
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fad2 	bl	8000504 <__aeabi_ui2d>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	ec43 2b11 	vmov	d1, r2, r3
 8000f68:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8001018 <HAL_UART_RxCpltCallback+0x178>
 8000f6c:	f003 febc 	bl	8004ce8 <pow>
 8000f70:	ec53 2b10 	vmov	r2, r3, d0
 8000f74:	4620      	mov	r0, r4
 8000f76:	4629      	mov	r1, r5
 8000f78:	f7ff fb3e 	bl	80005f8 <__aeabi_dmul>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4614      	mov	r4, r2
 8000f82:	461d      	mov	r5, r3
 8000f84:	4b2d      	ldr	r3, [pc, #180]	; (800103c <HAL_UART_RxCpltCallback+0x19c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff facb 	bl	8000524 <__aeabi_i2d>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4620      	mov	r0, r4
 8000f94:	4629      	mov	r1, r5
 8000f96:	f7ff f979 	bl	800028c <__adddf3>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fdd9 	bl	8000b58 <__aeabi_d2uiz>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <HAL_UART_RxCpltCallback+0x19c>)
 8000fac:	701a      	strb	r2, [r3, #0]
				p++;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
				i--;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <HAL_UART_RxCpltCallback+0x194>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <HAL_UART_RxCpltCallback+0x194>)
 8000fbe:	701a      	strb	r2, [r3, #0]
			while(i>=0 && drank_arr[i]<='9' && drank_arr[i] >= '0'){
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_UART_RxCpltCallback+0x194>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_UART_RxCpltCallback+0x198>)
 8000fc8:	5c9b      	ldrb	r3, [r3, r2]
 8000fca:	2b39      	cmp	r3, #57	; 0x39
 8000fcc:	d806      	bhi.n	8000fdc <HAL_UART_RxCpltCallback+0x13c>
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_UART_RxCpltCallback+0x194>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_UART_RxCpltCallback+0x198>)
 8000fd6:	5c9b      	ldrb	r3, [r3, r2]
 8000fd8:	2b2f      	cmp	r3, #47	; 0x2f
 8000fda:	d8b2      	bhi.n	8000f42 <HAL_UART_RxCpltCallback+0xa2>
			if(i==0 && drank_arr[i] == '-'){
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_UART_RxCpltCallback+0x194>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10c      	bne.n	8000ffe <HAL_UART_RxCpltCallback+0x15e>
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <HAL_UART_RxCpltCallback+0x194>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <HAL_UART_RxCpltCallback+0x198>)
 8000fec:	5c9b      	ldrb	r3, [r3, r2]
 8000fee:	2b2d      	cmp	r3, #45	; 0x2d
 8000ff0:	d105      	bne.n	8000ffe <HAL_UART_RxCpltCallback+0x15e>
				dw *= -1;
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_UART_RxCpltCallback+0x19c>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	425b      	negs	r3, r3
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_UART_RxCpltCallback+0x19c>)
 8000ffc:	701a      	strb	r2, [r3, #0]
			i = 0;
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_UART_RxCpltCallback+0x194>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
}
 8001004:	e002      	b.n	800100c <HAL_UART_RxCpltCallback+0x16c>
			out = 0;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <HAL_UART_RxCpltCallback+0x184>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bdb0      	pop	{r4, r5, r7, pc}
 8001014:	f3af 8000 	nop.w
 8001018:	00000000 	.word	0x00000000
 800101c:	40240000 	.word	0x40240000
 8001020:	20000192 	.word	0x20000192
 8001024:	200001aa 	.word	0x200001aa
 8001028:	2000015c 	.word	0x2000015c
 800102c:	40020400 	.word	0x40020400
 8001030:	40020800 	.word	0x40020800
 8001034:	200001a9 	.word	0x200001a9
 8001038:	20000194 	.word	0x20000194
 800103c:	200001a8 	.word	0x200001a8

08001040 <delay>:

char msg[20];
int adcval;
void delay (uint16_t time)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
    /* change your code here for the delay in microseconds */
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <delay+0x30>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
    while ((__HAL_TIM_GET_COUNTER(&htim3))<time);
 8001052:	bf00      	nop
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <delay+0x30>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	429a      	cmp	r2, r3
 800105e:	d3f9      	bcc.n	8001054 <delay+0x14>
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	2000008c 	.word	0x2000008c

08001074 <Set_Pin_Output>:
float Humidity;
float PreviousWater;

uint8_t Presence = 0,timechk=0;
void Set_Pin_Output (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4619      	mov	r1, r3
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 ff86 	bl	8001fb4 <HAL_GPIO_Init>
}
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	4619      	mov	r1, r3
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 ff68 	bl	8001fb4 <HAL_GPIO_Init>
}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <DHT11_Start>:
void DHT11_Start (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
    Set_Pin_Output (GPIOx, GPIO_Pin);  // set the pin as output
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	4619      	mov	r1, r3
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ffb9 	bl	8001074 <Set_Pin_Output>
    HAL_GPIO_WritePin (GPIOx, GPIO_Pin, 0);   // pull the pin low
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f001 f8ef 	bl	80022ec <HAL_GPIO_WritePin>
    delay (18000);   // wait for 18ms
 800110e:	f244 6050 	movw	r0, #18000	; 0x4650
 8001112:	f7ff ff95 	bl	8001040 <delay>
    HAL_GPIO_WritePin (GPIOx, GPIO_Pin, 1);   // pull the pin high
 8001116:	887b      	ldrh	r3, [r7, #2]
 8001118:	2201      	movs	r2, #1
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f001 f8e5 	bl	80022ec <HAL_GPIO_WritePin>
    delay (20);   // wait for 20us
 8001122:	2014      	movs	r0, #20
 8001124:	f7ff ff8c 	bl	8001040 <delay>
    Set_Pin_Input(GPIOx, GPIO_Pin);    // set as input
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	4619      	mov	r1, r3
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ffbf 	bl	80010b0 <Set_Pin_Input>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <DHT11_Check_Response>:
uint8_t DHT11_Check_Response (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	807b      	strh	r3, [r7, #2]
    uint8_t Response = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]
    delay (40);
 800114a:	2028      	movs	r0, #40	; 0x28
 800114c:	f7ff ff78 	bl	8001040 <delay>
    if (!(HAL_GPIO_ReadPin (GPIOx, GPIO_Pin)))
 8001150:	887b      	ldrh	r3, [r7, #2]
 8001152:	4619      	mov	r1, r3
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f001 f8b1 	bl	80022bc <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10f      	bne.n	8001180 <DHT11_Check_Response+0x46>
    {
        delay (80);
 8001160:	2050      	movs	r0, #80	; 0x50
 8001162:	f7ff ff6d 	bl	8001040 <delay>
        if ((HAL_GPIO_ReadPin (GPIOx, GPIO_Pin))) Response = 1;
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	4619      	mov	r1, r3
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f001 f8a6 	bl	80022bc <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <DHT11_Check_Response+0x42>
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e001      	b.n	8001180 <DHT11_Check_Response+0x46>
        else Response = -1; // 255
 800117c:	23ff      	movs	r3, #255	; 0xff
 800117e:	73fb      	strb	r3, [r7, #15]
    }
    while ((HAL_GPIO_ReadPin (GPIOx, GPIO_Pin)));   // wait for the pin to go low
 8001180:	bf00      	nop
 8001182:	887b      	ldrh	r3, [r7, #2]
 8001184:	4619      	mov	r1, r3
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f001 f898 	bl	80022bc <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f7      	bne.n	8001182 <DHT11_Check_Response+0x48>

    return Response;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <DHT11_Read>:

uint8_t DHT11_Read (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
    uint8_t i,j;
    for (j=0;j<8;j++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	73bb      	strb	r3, [r7, #14]
 80011ac:	e03a      	b.n	8001224 <DHT11_Read+0x88>
    {
        while (!(HAL_GPIO_ReadPin (GPIOx, GPIO_Pin)));   // wait for the pin to go high
 80011ae:	bf00      	nop
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f001 f881 	bl	80022bc <HAL_GPIO_ReadPin>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0f7      	beq.n	80011b0 <DHT11_Read+0x14>
        delay (40);   // wait for 40 us
 80011c0:	2028      	movs	r0, #40	; 0x28
 80011c2:	f7ff ff3d 	bl	8001040 <delay>
        if (!(HAL_GPIO_ReadPin (GPIOx, GPIO_Pin)))   // if the pin is low
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	4619      	mov	r1, r3
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f001 f876 	bl	80022bc <HAL_GPIO_ReadPin>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10e      	bne.n	80011f4 <DHT11_Read+0x58>
        {
            i&= ~(1<<(7-j));   // write 0
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	f1c3 0307 	rsb	r3, r3, #7
 80011dc:	2201      	movs	r2, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ec:	4013      	ands	r3, r2
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	e00b      	b.n	800120c <DHT11_Read+0x70>
        }
        else i|= (1<<(7-j));  // if the pin is high, write 1
 80011f4:	7bbb      	ldrb	r3, [r7, #14]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2201      	movs	r2, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	b25a      	sxtb	r2, r3
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4313      	orrs	r3, r2
 8001208:	b25b      	sxtb	r3, r3
 800120a:	73fb      	strb	r3, [r7, #15]
        while ((HAL_GPIO_ReadPin (GPIOx, GPIO_Pin)));  // wait for the pin to go low
 800120c:	bf00      	nop
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	4619      	mov	r1, r3
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f001 f852 	bl	80022bc <HAL_GPIO_ReadPin>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f7      	bne.n	800120e <DHT11_Read+0x72>
    for (j=0;j<8;j++)
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	3301      	adds	r3, #1
 8001222:	73bb      	strb	r3, [r7, #14]
 8001224:	7bbb      	ldrb	r3, [r7, #14]
 8001226:	2b07      	cmp	r3, #7
 8001228:	d9c1      	bls.n	80011ae <DHT11_Read+0x12>
    }
    return i;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_GPIO_EXTI_Callback>:
long count = 0;


uint8_t rp;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
    count += 1;
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_GPIO_EXTI_Callback+0x60>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a13      	ldr	r2, [pc, #76]	; (8001294 <HAL_GPIO_EXTI_Callback+0x60>)
 8001246:	6013      	str	r3, [r2, #0]
//    char uart_buf2[50];
//	  int uart_buf_len2;
//	  uart_buf_len2 = sprintf(uart_buf2, "count: %ld",count);
	  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf2, uart_buf_len2, 100);

	  if(count >= 5*dw && dw != 0){
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <HAL_GPIO_EXTI_Callback+0x64>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	441a      	add	r2, r3
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_GPIO_EXTI_Callback+0x60>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	dc17      	bgt.n	800128c <HAL_GPIO_EXTI_Callback+0x58>
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_GPIO_EXTI_Callback+0x64>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d013      	beq.n	800128c <HAL_GPIO_EXTI_Callback+0x58>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2102      	movs	r1, #2
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <HAL_GPIO_EXTI_Callback+0x68>)
 800126a:	f001 f83f 	bl	80022ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800126e:	2201      	movs	r2, #1
 8001270:	2101      	movs	r1, #1
 8001272:	480b      	ldr	r0, [pc, #44]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001274:	f001 f83a 	bl	80022ec <HAL_GPIO_WritePin>
		  dw = 0;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <HAL_GPIO_EXTI_Callback+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
		  Water = 1;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x70>)
 8001280:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001284:	601a      	str	r2, [r3, #0]
		  //HAL_Delay(1000);
		  count = 0;
 8001286:	4b03      	ldr	r3, [pc, #12]	; (8001294 <HAL_GPIO_EXTI_Callback+0x60>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
	  }
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200001c4 	.word	0x200001c4
 8001298:	200001a8 	.word	0x200001a8
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020400 	.word	0x40020400
 80012a4:	2000015c 	.word	0x2000015c

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f000 fc47 	bl	8001b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f000 f8eb 	bl	800148c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b6:	f000 f9f7 	bl	80016a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012ba:	f000 f9cb 	bl	8001654 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80012be:	f000 f951 	bl	8001564 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012c2:	f000 f99d 	bl	8001600 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80012c6:	485c      	ldr	r0, [pc, #368]	; (8001438 <main+0x190>)
 80012c8:	f001 fd44 	bl	8002d54 <HAL_TIM_Base_Start_IT>

  	int j=0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
	for(j=0;j<20;j++){
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	e008      	b.n	80012e8 <main+0x40>
	  drank_arr[i] = 0;
 80012d6:	4b59      	ldr	r3, [pc, #356]	; (800143c <main+0x194>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b58      	ldr	r3, [pc, #352]	; (8001440 <main+0x198>)
 80012de:	2100      	movs	r1, #0
 80012e0:	5499      	strb	r1, [r3, r2]
	for(j=0;j<20;j++){
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3301      	adds	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b13      	cmp	r3, #19
 80012ec:	ddf3      	ble.n	80012d6 <main+0x2e>
	}
	dw=0;
 80012ee:	4b55      	ldr	r3, [pc, #340]	; (8001444 <main+0x19c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
	i=0;
 80012f4:	4b51      	ldr	r3, [pc, #324]	; (800143c <main+0x194>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
	count = 0;
 80012fa:	4b53      	ldr	r3, [pc, #332]	; (8001448 <main+0x1a0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, &drank_water_bit, sizeof(drank_water_bit));
 8001300:	2201      	movs	r2, #1
 8001302:	4952      	ldr	r1, [pc, #328]	; (800144c <main+0x1a4>)
 8001304:	4852      	ldr	r0, [pc, #328]	; (8001450 <main+0x1a8>)
 8001306:	f002 f8b6 	bl	8003476 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800130a:	2120      	movs	r1, #32
 800130c:	4851      	ldr	r0, [pc, #324]	; (8001454 <main+0x1ac>)
 800130e:	f001 f806 	bl	800231e <HAL_GPIO_TogglePin>
	  DHT11_Start(GPIOA, GPIO_PIN_1);
 8001312:	2102      	movs	r1, #2
 8001314:	484f      	ldr	r0, [pc, #316]	; (8001454 <main+0x1ac>)
 8001316:	f7ff fee9 	bl	80010ec <DHT11_Start>
	      Presence = DHT11_Check_Response(GPIOA, GPIO_PIN_1);
 800131a:	2102      	movs	r1, #2
 800131c:	484d      	ldr	r0, [pc, #308]	; (8001454 <main+0x1ac>)
 800131e:	f7ff ff0c 	bl	800113a <DHT11_Check_Response>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <main+0x1b0>)
 8001328:	701a      	strb	r2, [r3, #0]
	      Rh_byte1 = DHT11_Read (GPIOA, GPIO_PIN_1);
 800132a:	2102      	movs	r1, #2
 800132c:	4849      	ldr	r0, [pc, #292]	; (8001454 <main+0x1ac>)
 800132e:	f7ff ff35 	bl	800119c <DHT11_Read>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b49      	ldr	r3, [pc, #292]	; (800145c <main+0x1b4>)
 8001338:	701a      	strb	r2, [r3, #0]
	      Rh_byte2 = DHT11_Read (GPIOA, GPIO_PIN_1);
 800133a:	2102      	movs	r1, #2
 800133c:	4845      	ldr	r0, [pc, #276]	; (8001454 <main+0x1ac>)
 800133e:	f7ff ff2d 	bl	800119c <DHT11_Read>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b46      	ldr	r3, [pc, #280]	; (8001460 <main+0x1b8>)
 8001348:	701a      	strb	r2, [r3, #0]
	      Temp_byte1 = DHT11_Read (GPIOA, GPIO_PIN_1);
 800134a:	2102      	movs	r1, #2
 800134c:	4841      	ldr	r0, [pc, #260]	; (8001454 <main+0x1ac>)
 800134e:	f7ff ff25 	bl	800119c <DHT11_Read>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b43      	ldr	r3, [pc, #268]	; (8001464 <main+0x1bc>)
 8001358:	701a      	strb	r2, [r3, #0]
	      Temp_byte2 = DHT11_Read (GPIOA, GPIO_PIN_1);
 800135a:	2102      	movs	r1, #2
 800135c:	483d      	ldr	r0, [pc, #244]	; (8001454 <main+0x1ac>)
 800135e:	f7ff ff1d 	bl	800119c <DHT11_Read>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b40      	ldr	r3, [pc, #256]	; (8001468 <main+0x1c0>)
 8001368:	701a      	strb	r2, [r3, #0]
	      SUM = DHT11_Read(GPIOA, GPIO_PIN_1);
 800136a:	2102      	movs	r1, #2
 800136c:	4839      	ldr	r0, [pc, #228]	; (8001454 <main+0x1ac>)
 800136e:	f7ff ff15 	bl	800119c <DHT11_Read>
 8001372:	4603      	mov	r3, r0
 8001374:	b29a      	uxth	r2, r3
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <main+0x1c4>)
 8001378:	801a      	strh	r2, [r3, #0]

	      TEMP = Temp_byte1;
 800137a:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <main+0x1bc>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b29a      	uxth	r2, r3
 8001380:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <main+0x1c8>)
 8001382:	801a      	strh	r2, [r3, #0]
	      RH = Rh_byte1;
 8001384:	4b35      	ldr	r3, [pc, #212]	; (800145c <main+0x1b4>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b29a      	uxth	r2, r3
 800138a:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <main+0x1cc>)
 800138c:	801a      	strh	r2, [r3, #0]

	      Temperature = (float) TEMP;
 800138e:	4b38      	ldr	r3, [pc, #224]	; (8001470 <main+0x1c8>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139a:	4b37      	ldr	r3, [pc, #220]	; (8001478 <main+0x1d0>)
 800139c:	edc3 7a00 	vstr	s15, [r3]
	      Humidity = (float) RH;
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <main+0x1cc>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ac:	4b33      	ldr	r3, [pc, #204]	; (800147c <main+0x1d4>)
 80013ae:	edc3 7a00 	vstr	s15, [r3]
	      HAL_Delay(700);
 80013b2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80013b6:	f000 fc35 	bl	8001c24 <HAL_Delay>

	      //char uart_buf[50];
		  int uart_buf_len;
		  uart_buf_len = sprintf(uart_buf, "B%d/%d/%d/P",(uint8_t)Temperature,(uint8_t)Humidity,(uint8_t)Water);
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <main+0x1d0>)
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80013c8:	793b      	ldrb	r3, [r7, #4]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b2b      	ldr	r3, [pc, #172]	; (800147c <main+0x1d4>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80013dc:	793b      	ldrb	r3, [r7, #4]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	4619      	mov	r1, r3
 80013e2:	4b27      	ldr	r3, [pc, #156]	; (8001480 <main+0x1d8>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ec:	edc7 7a01 	vstr	s15, [r7, #4]
 80013f0:	793b      	ldrb	r3, [r7, #4]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	460b      	mov	r3, r1
 80013f8:	4922      	ldr	r1, [pc, #136]	; (8001484 <main+0x1dc>)
 80013fa:	4823      	ldr	r0, [pc, #140]	; (8001488 <main+0x1e0>)
 80013fc:	f003 f806 	bl	800440c <siprintf>
 8001400:	60b8      	str	r0, [r7, #8]
		  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	b29a      	uxth	r2, r3
 8001406:	2364      	movs	r3, #100	; 0x64
 8001408:	491f      	ldr	r1, [pc, #124]	; (8001488 <main+0x1e0>)
 800140a:	4811      	ldr	r0, [pc, #68]	; (8001450 <main+0x1a8>)
 800140c:	f001 ffa1 	bl	8003352 <HAL_UART_Transmit>
		  HAL_Delay(1300);
 8001410:	f240 5014 	movw	r0, #1300	; 0x514
 8001414:	f000 fc06 	bl	8001c24 <HAL_Delay>

		  if(Water == 1){
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <main+0x1d8>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001422:	eef4 7a47 	vcmp.f32	s15, s14
 8001426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142a:	f47f af6e 	bne.w	800130a <main+0x62>
			  Water = 0;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <main+0x1d8>)
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
  {
 8001436:	e768      	b.n	800130a <main+0x62>
 8001438:	2000008c 	.word	0x2000008c
 800143c:	200001a9 	.word	0x200001a9
 8001440:	20000194 	.word	0x20000194
 8001444:	200001a8 	.word	0x200001a8
 8001448:	200001c4 	.word	0x200001c4
 800144c:	20000192 	.word	0x20000192
 8001450:	200000d4 	.word	0x200000d4
 8001454:	40020000 	.word	0x40020000
 8001458:	200001c0 	.word	0x200001c0
 800145c:	200001ab 	.word	0x200001ab
 8001460:	200001ac 	.word	0x200001ac
 8001464:	200001ad 	.word	0x200001ad
 8001468:	200001ae 	.word	0x200001ae
 800146c:	200001b0 	.word	0x200001b0
 8001470:	200001b4 	.word	0x200001b4
 8001474:	200001b2 	.word	0x200001b2
 8001478:	200001b8 	.word	0x200001b8
 800147c:	200001bc 	.word	0x200001bc
 8001480:	2000015c 	.word	0x2000015c
 8001484:	08005b38 	.word	0x08005b38
 8001488:	20000160 	.word	0x20000160

0800148c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b094      	sub	sp, #80	; 0x50
 8001490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	2230      	movs	r2, #48	; 0x30
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f002 ffae 	bl	80043fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	4b29      	ldr	r3, [pc, #164]	; (800155c <SystemClock_Config+0xd0>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a28      	ldr	r2, [pc, #160]	; (800155c <SystemClock_Config+0xd0>)
 80014ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b26      	ldr	r3, [pc, #152]	; (800155c <SystemClock_Config+0xd0>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <SystemClock_Config+0xd4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014d8:	4a21      	ldr	r2, [pc, #132]	; (8001560 <SystemClock_Config+0xd4>)
 80014da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <SystemClock_Config+0xd4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ec:	2302      	movs	r3, #2
 80014ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f4:	2310      	movs	r3, #16
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f8:	2302      	movs	r3, #2
 80014fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014fc:	2300      	movs	r3, #0
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001500:	2310      	movs	r3, #16
 8001502:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001504:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001508:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800150a:	2304      	movs	r3, #4
 800150c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800150e:	2307      	movs	r3, #7
 8001510:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001512:	f107 0320 	add.w	r3, r7, #32
 8001516:	4618      	mov	r0, r3
 8001518:	f000 ff34 	bl	8002384 <HAL_RCC_OscConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001522:	f000 f979 	bl	8001818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	230f      	movs	r3, #15
 8001528:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152a:	2302      	movs	r3, #2
 800152c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	2102      	movs	r1, #2
 8001542:	4618      	mov	r0, r3
 8001544:	f001 f996 	bl	8002874 <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800154e:	f000 f963 	bl	8001818 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3750      	adds	r7, #80	; 0x50
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40007000 	.word	0x40007000

08001564 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_TIM3_Init+0x94>)
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <MX_TIM3_Init+0x98>)
 8001584:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <MX_TIM3_Init+0x94>)
 8001588:	2253      	movs	r2, #83	; 0x53
 800158a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_TIM3_Init+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_TIM3_Init+0x94>)
 8001594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001598:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_TIM3_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <MX_TIM3_Init+0x94>)
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015a6:	4814      	ldr	r0, [pc, #80]	; (80015f8 <MX_TIM3_Init+0x94>)
 80015a8:	f001 fb84 	bl	8002cb4 <HAL_TIM_Base_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80015b2:	f000 f931 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	4619      	mov	r1, r3
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <MX_TIM3_Init+0x94>)
 80015c4:	f001 fc28 	bl	8002e18 <HAL_TIM_ConfigClockSource>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80015ce:	f000 f923 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015da:	463b      	mov	r3, r7
 80015dc:	4619      	mov	r1, r3
 80015de:	4806      	ldr	r0, [pc, #24]	; (80015f8 <MX_TIM3_Init+0x94>)
 80015e0:	f001 fdfc 	bl	80031dc <HAL_TIMEx_MasterConfigSynchronization>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80015ea:	f000 f915 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000008c 	.word	0x2000008c
 80015fc:	40000400 	.word	0x40000400

08001600 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <MX_USART1_UART_Init+0x50>)
 8001608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_USART1_UART_Init+0x4c>)
 800160c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_USART1_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_USART1_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001638:	f001 fe3e 	bl	80032b8 <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001642:	f000 f8e9 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200000d4 	.word	0x200000d4
 8001650:	40011000 	.word	0x40011000

08001654 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <MX_USART2_UART_Init+0x50>)
 800165c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 800168c:	f001 fe14 	bl	80032b8 <HAL_UART_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001696:	f000 f8bf 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000118 	.word	0x20000118
 80016a4:	40004400 	.word	0x40004400

080016a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b51      	ldr	r3, [pc, #324]	; (8001808 <MX_GPIO_Init+0x160>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a50      	ldr	r2, [pc, #320]	; (8001808 <MX_GPIO_Init+0x160>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b4e      	ldr	r3, [pc, #312]	; (8001808 <MX_GPIO_Init+0x160>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <MX_GPIO_Init+0x160>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a49      	ldr	r2, [pc, #292]	; (8001808 <MX_GPIO_Init+0x160>)
 80016e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <MX_GPIO_Init+0x160>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <MX_GPIO_Init+0x160>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a42      	ldr	r2, [pc, #264]	; (8001808 <MX_GPIO_Init+0x160>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b40      	ldr	r3, [pc, #256]	; (8001808 <MX_GPIO_Init+0x160>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <MX_GPIO_Init+0x160>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a3b      	ldr	r2, [pc, #236]	; (8001808 <MX_GPIO_Init+0x160>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b39      	ldr	r3, [pc, #228]	; (8001808 <MX_GPIO_Init+0x160>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	2103      	movs	r1, #3
 8001732:	4836      	ldr	r0, [pc, #216]	; (800180c <MX_GPIO_Init+0x164>)
 8001734:	f000 fdda 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2120      	movs	r1, #32
 800173c:	4834      	ldr	r0, [pc, #208]	; (8001810 <MX_GPIO_Init+0x168>)
 800173e:	f000 fdd5 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	2101      	movs	r1, #1
 8001746:	4833      	ldr	r0, [pc, #204]	; (8001814 <MX_GPIO_Init+0x16c>)
 8001748:	f000 fdd0 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800174c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001752:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	482a      	ldr	r0, [pc, #168]	; (800180c <MX_GPIO_Init+0x164>)
 8001764:	f000 fc26 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001768:	2303      	movs	r3, #3
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	4823      	ldr	r0, [pc, #140]	; (800180c <MX_GPIO_Init+0x164>)
 8001780:	f000 fc18 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001784:	2302      	movs	r3, #2
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	481e      	ldr	r0, [pc, #120]	; (8001810 <MX_GPIO_Init+0x168>)
 8001798:	f000 fc0c 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800179c:	2310      	movs	r3, #16
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	4817      	ldr	r0, [pc, #92]	; (8001810 <MX_GPIO_Init+0x168>)
 80017b2:	f000 fbff 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017b6:	2320      	movs	r3, #32
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4810      	ldr	r0, [pc, #64]	; (8001810 <MX_GPIO_Init+0x168>)
 80017ce:	f000 fbf1 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017d2:	2301      	movs	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	480a      	ldr	r0, [pc, #40]	; (8001814 <MX_GPIO_Init+0x16c>)
 80017ea:	f000 fbe3 	bl	8001fb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2101      	movs	r1, #1
 80017f2:	200a      	movs	r0, #10
 80017f4:	f000 fb15 	bl	8001e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017f8:	200a      	movs	r0, #10
 80017fa:	f000 fb2e 	bl	8001e5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	; 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40020800 	.word	0x40020800
 8001810:	40020000 	.word	0x40020000
 8001814:	40020400 	.word	0x40020400

08001818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800181c:	b672      	cpsid	i
}
 800181e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001820:	e7fe      	b.n	8001820 <Error_Handler+0x8>
	...

08001824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_MspInit+0x4c>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <HAL_MspInit+0x4c>)
 8001834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001838:	6453      	str	r3, [r2, #68]	; 0x44
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_MspInit+0x4c>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_MspInit+0x4c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <HAL_MspInit+0x4c>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_MspInit+0x4c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001862:	2005      	movs	r0, #5
 8001864:	f000 fad2 	bl	8001e0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800

08001874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_TIM_Base_MspInit+0x3c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d10d      	bne.n	80018a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_TIM_Base_MspInit+0x40>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_TIM_Base_MspInit+0x40>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_TIM_Base_MspInit+0x40>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40000400 	.word	0x40000400
 80018b4:	40023800 	.word	0x40023800

080018b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a3f      	ldr	r2, [pc, #252]	; (80019d4 <HAL_UART_MspInit+0x11c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d146      	bne.n	8001968 <HAL_UART_MspInit+0xb0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <HAL_UART_MspInit+0x120>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a3d      	ldr	r2, [pc, #244]	; (80019d8 <HAL_UART_MspInit+0x120>)
 80018e4:	f043 0310 	orr.w	r3, r3, #16
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <HAL_UART_MspInit+0x120>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <HAL_UART_MspInit+0x120>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a36      	ldr	r2, [pc, #216]	; (80019d8 <HAL_UART_MspInit+0x120>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b34      	ldr	r3, [pc, #208]	; (80019d8 <HAL_UART_MspInit+0x120>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001924:	2307      	movs	r3, #7
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	482b      	ldr	r0, [pc, #172]	; (80019dc <HAL_UART_MspInit+0x124>)
 8001930:	f000 fb40 	bl	8001fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001946:	2307      	movs	r3, #7
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4619      	mov	r1, r3
 8001950:	4822      	ldr	r0, [pc, #136]	; (80019dc <HAL_UART_MspInit+0x124>)
 8001952:	f000 fb2f 	bl	8001fb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2102      	movs	r1, #2
 800195a:	2025      	movs	r0, #37	; 0x25
 800195c:	f000 fa61 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001960:	2025      	movs	r0, #37	; 0x25
 8001962:	f000 fa7a 	bl	8001e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001966:	e030      	b.n	80019ca <HAL_UART_MspInit+0x112>
  else if(huart->Instance==USART2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <HAL_UART_MspInit+0x128>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d12b      	bne.n	80019ca <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <HAL_UART_MspInit+0x120>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <HAL_UART_MspInit+0x120>)
 800197c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_UART_MspInit+0x120>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_UART_MspInit+0x120>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_UART_MspInit+0x120>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_UART_MspInit+0x120>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019aa:	230c      	movs	r3, #12
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ba:	2307      	movs	r3, #7
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <HAL_UART_MspInit+0x124>)
 80019c6:	f000 faf5 	bl	8001fb4 <HAL_GPIO_Init>
}
 80019ca:	bf00      	nop
 80019cc:	3730      	adds	r7, #48	; 0x30
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40011000 	.word	0x40011000
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020000 	.word	0x40020000
 80019e0:	40004400 	.word	0x40004400

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <NMI_Handler+0x4>

080019ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <HardFault_Handler+0x4>

080019f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <MemManage_Handler+0x4>

080019f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a30:	f000 f8d8 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001a3c:	2010      	movs	r0, #16
 8001a3e:	f000 fc89 	bl	8002354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <USART1_IRQHandler+0x10>)
 8001a4e:	f001 fd43 	bl	80034d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200000d4 	.word	0x200000d4

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d207      	bcs.n	8001a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a8c:	f002 fc8c 	bl	80043a8 <__errno>
 8001a90:	4603      	mov	r3, r0
 8001a92:	220c      	movs	r2, #12
 8001a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	e009      	b.n	8001ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <_sbrk+0x64>)
 8001aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20018000 	.word	0x20018000
 8001abc:	00000400 	.word	0x00000400
 8001ac0:	200001c8 	.word	0x200001c8
 8001ac4:	200001e0 	.word	0x200001e0

08001ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001af2:	490e      	ldr	r1, [pc, #56]	; (8001b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b08:	4c0b      	ldr	r4, [pc, #44]	; (8001b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b16:	f7ff ffd7 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f002 fc4b 	bl	80043b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1e:	f7ff fbc3 	bl	80012a8 <main>
  bx  lr    
 8001b22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b30:	08005bd0 	.word	0x08005bd0
  ldr r2, =_sbss
 8001b34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b38:	200001e0 	.word	0x200001e0

08001b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC_IRQHandler>
	...

08001b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <HAL_Init+0x40>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_Init+0x40>)
 8001b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_Init+0x40>)
 8001b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 f94f 	bl	8001e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 f808 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b74:	f7ff fe56 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f967 	bl	8001e76 <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f000 f92f 	bl	8001e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000008 	.word	0x20000008
 8001c08:	200001cc 	.word	0x200001cc

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200001cc 	.word	0x200001cc

08001c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff ffee 	bl	8001c0c <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d005      	beq.n	8001c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_Delay+0x44>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff ffde 	bl	8001c0c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8f7      	bhi.n	8001c4c <HAL_Delay+0x28>
  {
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008

08001c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9e:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	60d3      	str	r3, [r2, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db0b      	blt.n	8001cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	4907      	ldr	r1, [pc, #28]	; (8001d08 <__NVIC_EnableIRQ+0x38>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	db0a      	blt.n	8001d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	490c      	ldr	r1, [pc, #48]	; (8001d58 <__NVIC_SetPriority+0x4c>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d34:	e00a      	b.n	8001d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4908      	ldr	r1, [pc, #32]	; (8001d5c <__NVIC_SetPriority+0x50>)
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	3b04      	subs	r3, #4
 8001d44:	0112      	lsls	r2, r2, #4
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	761a      	strb	r2, [r3, #24]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f1c3 0307 	rsb	r3, r3, #7
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	bf28      	it	cs
 8001d7e:	2304      	movcs	r3, #4
 8001d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3304      	adds	r3, #4
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d902      	bls.n	8001d90 <NVIC_EncodePriority+0x30>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3b03      	subs	r3, #3
 8001d8e:	e000      	b.n	8001d92 <NVIC_EncodePriority+0x32>
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43d9      	mvns	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	4313      	orrs	r3, r2
         );
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3724      	adds	r7, #36	; 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd8:	d301      	bcc.n	8001dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00f      	b.n	8001dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <SysTick_Config+0x40>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de6:	210f      	movs	r1, #15
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f7ff ff8e 	bl	8001d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <SysTick_Config+0x40>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <SysTick_Config+0x40>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff29 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e34:	f7ff ff3e 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	6978      	ldr	r0, [r7, #20]
 8001e40:	f7ff ff8e 	bl	8001d60 <NVIC_EncodePriority>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff5d 	bl	8001d0c <__NVIC_SetPriority>
}
 8001e52:	bf00      	nop
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff31 	bl	8001cd0 <__NVIC_EnableIRQ>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ffa2 	bl	8001dc8 <SysTick_Config>
 8001e84:	4603      	mov	r3, r0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff feb6 	bl	8001c0c <HAL_GetTick>
 8001ea0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d008      	beq.n	8001ec0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2280      	movs	r2, #128	; 0x80
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e052      	b.n	8001f66 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0216 	bic.w	r2, r2, #22
 8001ece:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ede:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d103      	bne.n	8001ef0 <HAL_DMA_Abort+0x62>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0208 	bic.w	r2, r2, #8
 8001efe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f10:	e013      	b.n	8001f3a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f12:	f7ff fe7b 	bl	8001c0c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b05      	cmp	r3, #5
 8001f1e:	d90c      	bls.n	8001f3a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2203      	movs	r2, #3
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e015      	b.n	8001f66 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1e4      	bne.n	8001f12 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4c:	223f      	movs	r2, #63	; 0x3f
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d004      	beq.n	8001f8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2280      	movs	r2, #128	; 0x80
 8001f86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e00c      	b.n	8001fa6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2205      	movs	r2, #5
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	e159      	b.n	8002284 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	f040 8148 	bne.w	800227e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d005      	beq.n	8002006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002002:	2b02      	cmp	r3, #2
 8002004:	d130      	bne.n	8002068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	2203      	movs	r2, #3
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800203c:	2201      	movs	r2, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 0201 	and.w	r2, r3, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b03      	cmp	r3, #3
 8002072:	d017      	beq.n	80020a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2203      	movs	r2, #3
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d123      	bne.n	80020f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	08da      	lsrs	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3208      	adds	r2, #8
 80020b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	220f      	movs	r2, #15
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	08da      	lsrs	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3208      	adds	r2, #8
 80020f2:	69b9      	ldr	r1, [r7, #24]
 80020f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0203 	and.w	r2, r3, #3
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a2 	beq.w	800227e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b57      	ldr	r3, [pc, #348]	; (800229c <HAL_GPIO_Init+0x2e8>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	4a56      	ldr	r2, [pc, #344]	; (800229c <HAL_GPIO_Init+0x2e8>)
 8002144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002148:	6453      	str	r3, [r2, #68]	; 0x44
 800214a:	4b54      	ldr	r3, [pc, #336]	; (800229c <HAL_GPIO_Init+0x2e8>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002156:	4a52      	ldr	r2, [pc, #328]	; (80022a0 <HAL_GPIO_Init+0x2ec>)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3302      	adds	r3, #2
 800215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	220f      	movs	r2, #15
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a49      	ldr	r2, [pc, #292]	; (80022a4 <HAL_GPIO_Init+0x2f0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x202>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a48      	ldr	r2, [pc, #288]	; (80022a8 <HAL_GPIO_Init+0x2f4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x1fe>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a47      	ldr	r2, [pc, #284]	; (80022ac <HAL_GPIO_Init+0x2f8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x1fa>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a46      	ldr	r2, [pc, #280]	; (80022b0 <HAL_GPIO_Init+0x2fc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x1f6>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a45      	ldr	r2, [pc, #276]	; (80022b4 <HAL_GPIO_Init+0x300>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x1f2>
 80021a2:	2304      	movs	r3, #4
 80021a4:	e008      	b.n	80021b8 <HAL_GPIO_Init+0x204>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x204>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e004      	b.n	80021b8 <HAL_GPIO_Init+0x204>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_Init+0x204>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_Init+0x204>
 80021b6:	2300      	movs	r3, #0
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	f002 0203 	and.w	r2, r2, #3
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	4093      	lsls	r3, r2
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c8:	4935      	ldr	r1, [pc, #212]	; (80022a0 <HAL_GPIO_Init+0x2ec>)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d6:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <HAL_GPIO_Init+0x304>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021fa:	4a2f      	ldr	r2, [pc, #188]	; (80022b8 <HAL_GPIO_Init+0x304>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002200:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <HAL_GPIO_Init+0x304>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002224:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <HAL_GPIO_Init+0x304>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800222a:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <HAL_GPIO_Init+0x304>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800224e:	4a1a      	ldr	r2, [pc, #104]	; (80022b8 <HAL_GPIO_Init+0x304>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002254:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <HAL_GPIO_Init+0x304>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002278:	4a0f      	ldr	r2, [pc, #60]	; (80022b8 <HAL_GPIO_Init+0x304>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b0f      	cmp	r3, #15
 8002288:	f67f aea2 	bls.w	8001fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3724      	adds	r7, #36	; 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	40013800 	.word	0x40013800
 80022a4:	40020000 	.word	0x40020000
 80022a8:	40020400 	.word	0x40020400
 80022ac:	40020800 	.word	0x40020800
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40013c00 	.word	0x40013c00

080022bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	887b      	ldrh	r3, [r7, #2]
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e001      	b.n	80022de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
 80022f8:	4613      	mov	r3, r2
 80022fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002308:	e003      	b.n	8002312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002330:	887a      	ldrh	r2, [r7, #2]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	041a      	lsls	r2, r3, #16
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43d9      	mvns	r1, r3
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	400b      	ands	r3, r1
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	619a      	str	r2, [r3, #24]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800236a:	4a05      	ldr	r2, [pc, #20]	; (8002380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe ff5e 	bl	8001234 <HAL_GPIO_EXTI_Callback>
  }
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40013c00 	.word	0x40013c00

08002384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e267      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d075      	beq.n	800248e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023a2:	4b88      	ldr	r3, [pc, #544]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d00c      	beq.n	80023c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ae:	4b85      	ldr	r3, [pc, #532]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d112      	bne.n	80023e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ba:	4b82      	ldr	r3, [pc, #520]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023c6:	d10b      	bne.n	80023e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	4b7e      	ldr	r3, [pc, #504]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d05b      	beq.n	800248c <HAL_RCC_OscConfig+0x108>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d157      	bne.n	800248c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e242      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e8:	d106      	bne.n	80023f8 <HAL_RCC_OscConfig+0x74>
 80023ea:	4b76      	ldr	r3, [pc, #472]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a75      	ldr	r2, [pc, #468]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e01d      	b.n	8002434 <HAL_RCC_OscConfig+0xb0>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0x98>
 8002402:	4b70      	ldr	r3, [pc, #448]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6f      	ldr	r2, [pc, #444]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b6d      	ldr	r3, [pc, #436]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a6c      	ldr	r2, [pc, #432]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e00b      	b.n	8002434 <HAL_RCC_OscConfig+0xb0>
 800241c:	4b69      	ldr	r3, [pc, #420]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a68      	ldr	r2, [pc, #416]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b66      	ldr	r3, [pc, #408]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a65      	ldr	r2, [pc, #404]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 800242e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7ff fbe6 	bl	8001c0c <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002444:	f7ff fbe2 	bl	8001c0c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e207      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	4b5b      	ldr	r3, [pc, #364]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0xc0>
 8002462:	e014      	b.n	800248e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7ff fbd2 	bl	8001c0c <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800246c:	f7ff fbce 	bl	8001c0c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	; 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e1f3      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	4b51      	ldr	r3, [pc, #324]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0xe8>
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d063      	beq.n	8002562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800249a:	4b4a      	ldr	r3, [pc, #296]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a6:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d11c      	bne.n	80024ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024b2:	4b44      	ldr	r3, [pc, #272]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d116      	bne.n	80024ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024be:	4b41      	ldr	r3, [pc, #260]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_RCC_OscConfig+0x152>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d001      	beq.n	80024d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e1c7      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d6:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4937      	ldr	r1, [pc, #220]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	e03a      	b.n	8002562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f4:	4b34      	ldr	r3, [pc, #208]	; (80025c8 <HAL_RCC_OscConfig+0x244>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7ff fb87 	bl	8001c0c <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002502:	f7ff fb83 	bl	8001c0c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e1a8      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002514:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4925      	ldr	r1, [pc, #148]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]
 8002534:	e015      	b.n	8002562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002536:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCC_OscConfig+0x244>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7ff fb66 	bl	8001c0c <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002544:	f7ff fb62 	bl	8001c0c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e187      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d036      	beq.n	80025dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d016      	beq.n	80025a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_RCC_OscConfig+0x248>)
 8002578:	2201      	movs	r2, #1
 800257a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257c:	f7ff fb46 	bl	8001c0c <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002584:	f7ff fb42 	bl	8001c0c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e167      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x200>
 80025a2:	e01b      	b.n	80025dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_RCC_OscConfig+0x248>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025aa:	f7ff fb2f 	bl	8001c0c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b0:	e00e      	b.n	80025d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025b2:	f7ff fb2b 	bl	8001c0c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d907      	bls.n	80025d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e150      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
 80025c4:	40023800 	.word	0x40023800
 80025c8:	42470000 	.word	0x42470000
 80025cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d0:	4b88      	ldr	r3, [pc, #544]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 80025d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ea      	bne.n	80025b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8097 	beq.w	8002718 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ee:	4b81      	ldr	r3, [pc, #516]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10f      	bne.n	800261a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	4b7d      	ldr	r3, [pc, #500]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	4a7c      	ldr	r2, [pc, #496]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002608:	6413      	str	r3, [r2, #64]	; 0x40
 800260a:	4b7a      	ldr	r3, [pc, #488]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002616:	2301      	movs	r3, #1
 8002618:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4b77      	ldr	r3, [pc, #476]	; (80027f8 <HAL_RCC_OscConfig+0x474>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d118      	bne.n	8002658 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002626:	4b74      	ldr	r3, [pc, #464]	; (80027f8 <HAL_RCC_OscConfig+0x474>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a73      	ldr	r2, [pc, #460]	; (80027f8 <HAL_RCC_OscConfig+0x474>)
 800262c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002632:	f7ff faeb 	bl	8001c0c <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263a:	f7ff fae7 	bl	8001c0c <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e10c      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_OscConfig+0x474>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x2ea>
 8002660:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	4a63      	ldr	r2, [pc, #396]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6713      	str	r3, [r2, #112]	; 0x70
 800266c:	e01c      	b.n	80026a8 <HAL_RCC_OscConfig+0x324>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b05      	cmp	r3, #5
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x30c>
 8002676:	4b5f      	ldr	r3, [pc, #380]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	4a5e      	ldr	r2, [pc, #376]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	6713      	str	r3, [r2, #112]	; 0x70
 8002682:	4b5c      	ldr	r3, [pc, #368]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	4a5b      	ldr	r2, [pc, #364]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6713      	str	r3, [r2, #112]	; 0x70
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0x324>
 8002690:	4b58      	ldr	r3, [pc, #352]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	6713      	str	r3, [r2, #112]	; 0x70
 800269c:	4b55      	ldr	r3, [pc, #340]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	4a54      	ldr	r2, [pc, #336]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 80026a2:	f023 0304 	bic.w	r3, r3, #4
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d015      	beq.n	80026dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7ff faac 	bl	8001c0c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b8:	f7ff faa8 	bl	8001c0c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e0cb      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ce:	4b49      	ldr	r3, [pc, #292]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0ee      	beq.n	80026b8 <HAL_RCC_OscConfig+0x334>
 80026da:	e014      	b.n	8002706 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026dc:	f7ff fa96 	bl	8001c0c <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e4:	f7ff fa92 	bl	8001c0c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e0b5      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fa:	4b3e      	ldr	r3, [pc, #248]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1ee      	bne.n	80026e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d105      	bne.n	8002718 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270c:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	4a38      	ldr	r2, [pc, #224]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002716:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80a1 	beq.w	8002864 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002722:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b08      	cmp	r3, #8
 800272c:	d05c      	beq.n	80027e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d141      	bne.n	80027ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002736:	4b31      	ldr	r3, [pc, #196]	; (80027fc <HAL_RCC_OscConfig+0x478>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff fa66 	bl	8001c0c <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002744:	f7ff fa62 	bl	8001c0c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e087      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002756:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	019b      	lsls	r3, r3, #6
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	085b      	lsrs	r3, r3, #1
 800277a:	3b01      	subs	r3, #1
 800277c:	041b      	lsls	r3, r3, #16
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	491b      	ldr	r1, [pc, #108]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_RCC_OscConfig+0x478>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7ff fa3b 	bl	8001c0c <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279a:	f7ff fa37 	bl	8001c0c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e05c      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ac:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x416>
 80027b8:	e054      	b.n	8002864 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <HAL_RCC_OscConfig+0x478>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7ff fa24 	bl	8001c0c <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c8:	f7ff fa20 	bl	8001c0c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e045      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCC_OscConfig+0x470>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x444>
 80027e6:	e03d      	b.n	8002864 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e038      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40007000 	.word	0x40007000
 80027fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x4ec>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d028      	beq.n	8002860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d121      	bne.n	8002860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d11a      	bne.n	8002860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002830:	4013      	ands	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002836:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002838:	4293      	cmp	r3, r2
 800283a:	d111      	bne.n	8002860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	3b01      	subs	r3, #1
 800284a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d107      	bne.n	8002860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800

08002874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0cc      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002888:	4b68      	ldr	r3, [pc, #416]	; (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d90c      	bls.n	80028b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b65      	ldr	r3, [pc, #404]	; (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b63      	ldr	r3, [pc, #396]	; (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0b8      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d020      	beq.n	80028fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c8:	4b59      	ldr	r3, [pc, #356]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a58      	ldr	r2, [pc, #352]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e0:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a52      	ldr	r2, [pc, #328]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ec:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	494d      	ldr	r1, [pc, #308]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d044      	beq.n	8002994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d119      	bne.n	8002952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e07f      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d003      	beq.n	8002932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292e:	2b03      	cmp	r3, #3
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002932:	4b3f      	ldr	r3, [pc, #252]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e06f      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e067      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002952:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f023 0203 	bic.w	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4934      	ldr	r1, [pc, #208]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	4313      	orrs	r3, r2
 8002962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002964:	f7ff f952 	bl	8001c0c <HAL_GetTick>
 8002968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	e00a      	b.n	8002982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296c:	f7ff f94e 	bl	8001c0c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	; 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e04f      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 020c 	and.w	r2, r3, #12
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	429a      	cmp	r2, r3
 8002992:	d1eb      	bne.n	800296c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002994:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d20c      	bcs.n	80029bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b22      	ldr	r3, [pc, #136]	; (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e032      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4916      	ldr	r1, [pc, #88]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	490e      	ldr	r1, [pc, #56]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029fa:	f000 f821 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	490a      	ldr	r1, [pc, #40]	; (8002a34 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	5ccb      	ldrb	r3, [r1, r3]
 8002a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a12:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <HAL_RCC_ClockConfig+0x1c8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff f8b2 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023c00 	.word	0x40023c00
 8002a30:	40023800 	.word	0x40023800
 8002a34:	08005b44 	.word	0x08005b44
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000004 	.word	0x20000004

08002a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a44:	b094      	sub	sp, #80	; 0x50
 8002a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a50:	2300      	movs	r3, #0
 8002a52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a58:	4b79      	ldr	r3, [pc, #484]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d00d      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x40>
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	f200 80e1 	bhi.w	8002c2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x34>
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a72:	e0db      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a74:	4b73      	ldr	r3, [pc, #460]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a78:	e0db      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a7a:	4b73      	ldr	r3, [pc, #460]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a7e:	e0d8      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a80:	4b6f      	ldr	r3, [pc, #444]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a8a:	4b6d      	ldr	r3, [pc, #436]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d063      	beq.n	8002b5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a96:	4b6a      	ldr	r3, [pc, #424]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	099b      	lsrs	r3, r3, #6
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aaa:	2300      	movs	r3, #0
 8002aac:	637b      	str	r3, [r7, #52]	; 0x34
 8002aae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	462b      	mov	r3, r5
 8002ab6:	f04f 0000 	mov.w	r0, #0
 8002aba:	f04f 0100 	mov.w	r1, #0
 8002abe:	0159      	lsls	r1, r3, #5
 8002ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac4:	0150      	lsls	r0, r2, #5
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4621      	mov	r1, r4
 8002acc:	1a51      	subs	r1, r2, r1
 8002ace:	6139      	str	r1, [r7, #16]
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ae4:	4659      	mov	r1, fp
 8002ae6:	018b      	lsls	r3, r1, #6
 8002ae8:	4651      	mov	r1, sl
 8002aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aee:	4651      	mov	r1, sl
 8002af0:	018a      	lsls	r2, r1, #6
 8002af2:	4651      	mov	r1, sl
 8002af4:	ebb2 0801 	subs.w	r8, r2, r1
 8002af8:	4659      	mov	r1, fp
 8002afa:	eb63 0901 	sbc.w	r9, r3, r1
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b12:	4690      	mov	r8, r2
 8002b14:	4699      	mov	r9, r3
 8002b16:	4623      	mov	r3, r4
 8002b18:	eb18 0303 	adds.w	r3, r8, r3
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	462b      	mov	r3, r5
 8002b20:	eb49 0303 	adc.w	r3, r9, r3
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b32:	4629      	mov	r1, r5
 8002b34:	024b      	lsls	r3, r1, #9
 8002b36:	4621      	mov	r1, r4
 8002b38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	024a      	lsls	r2, r1, #9
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b46:	2200      	movs	r2, #0
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b50:	f7fe f822 	bl	8000b98 <__aeabi_uldivmod>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4613      	mov	r3, r2
 8002b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b5c:	e058      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5e:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	099b      	lsrs	r3, r3, #6
 8002b64:	2200      	movs	r2, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	4611      	mov	r1, r2
 8002b6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b6e:	623b      	str	r3, [r7, #32]
 8002b70:	2300      	movs	r3, #0
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
 8002b74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b78:	4642      	mov	r2, r8
 8002b7a:	464b      	mov	r3, r9
 8002b7c:	f04f 0000 	mov.w	r0, #0
 8002b80:	f04f 0100 	mov.w	r1, #0
 8002b84:	0159      	lsls	r1, r3, #5
 8002b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b8a:	0150      	lsls	r0, r2, #5
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4641      	mov	r1, r8
 8002b92:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b96:	4649      	mov	r1, r9
 8002b98:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ba8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bb0:	ebb2 040a 	subs.w	r4, r2, sl
 8002bb4:	eb63 050b 	sbc.w	r5, r3, fp
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	00eb      	lsls	r3, r5, #3
 8002bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bc6:	00e2      	lsls	r2, r4, #3
 8002bc8:	4614      	mov	r4, r2
 8002bca:	461d      	mov	r5, r3
 8002bcc:	4643      	mov	r3, r8
 8002bce:	18e3      	adds	r3, r4, r3
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	eb45 0303 	adc.w	r3, r5, r3
 8002bd8:	607b      	str	r3, [r7, #4]
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002be6:	4629      	mov	r1, r5
 8002be8:	028b      	lsls	r3, r1, #10
 8002bea:	4621      	mov	r1, r4
 8002bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	028a      	lsls	r2, r1, #10
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	61fa      	str	r2, [r7, #28]
 8002c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c04:	f7fd ffc8 	bl	8000b98 <__aeabi_uldivmod>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	0c1b      	lsrs	r3, r3, #16
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c2a:	e002      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3750      	adds	r7, #80	; 0x50
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	00f42400 	.word	0x00f42400
 8002c48:	007a1200 	.word	0x007a1200

08002c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000000 	.word	0x20000000

08002c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c68:	f7ff fff0 	bl	8002c4c <HAL_RCC_GetHCLKFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	0a9b      	lsrs	r3, r3, #10
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4903      	ldr	r1, [pc, #12]	; (8002c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	08005b54 	.word	0x08005b54

08002c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c90:	f7ff ffdc 	bl	8002c4c <HAL_RCC_GetHCLKFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	0b5b      	lsrs	r3, r3, #13
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4903      	ldr	r1, [pc, #12]	; (8002cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	08005b54 	.word	0x08005b54

08002cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e041      	b.n	8002d4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fe fdca 	bl	8001874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	f000 f958 	bl	8002fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d001      	beq.n	8002d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e044      	b.n	8002df6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1e      	ldr	r2, [pc, #120]	; (8002e04 <HAL_TIM_Base_Start_IT+0xb0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d018      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d96:	d013      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1a      	ldr	r2, [pc, #104]	; (8002e08 <HAL_TIM_Base_Start_IT+0xb4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00e      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_TIM_Base_Start_IT+0xb8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d009      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <HAL_TIM_Base_Start_IT+0xbc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d004      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a16      	ldr	r2, [pc, #88]	; (8002e14 <HAL_TIM_Base_Start_IT+0xc0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d111      	bne.n	8002de4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b06      	cmp	r3, #6
 8002dd0:	d010      	beq.n	8002df4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0201 	orr.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de2:	e007      	b.n	8002df4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40010000 	.word	0x40010000
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40000800 	.word	0x40000800
 8002e10:	40000c00 	.word	0x40000c00
 8002e14:	40014000 	.word	0x40014000

08002e18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_TIM_ConfigClockSource+0x1c>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e0b4      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x186>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e6c:	d03e      	beq.n	8002eec <HAL_TIM_ConfigClockSource+0xd4>
 8002e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e72:	f200 8087 	bhi.w	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7a:	f000 8086 	beq.w	8002f8a <HAL_TIM_ConfigClockSource+0x172>
 8002e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e82:	d87f      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e84:	2b70      	cmp	r3, #112	; 0x70
 8002e86:	d01a      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0xa6>
 8002e88:	2b70      	cmp	r3, #112	; 0x70
 8002e8a:	d87b      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e8c:	2b60      	cmp	r3, #96	; 0x60
 8002e8e:	d050      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0x11a>
 8002e90:	2b60      	cmp	r3, #96	; 0x60
 8002e92:	d877      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e94:	2b50      	cmp	r3, #80	; 0x50
 8002e96:	d03c      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0xfa>
 8002e98:	2b50      	cmp	r3, #80	; 0x50
 8002e9a:	d873      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e9c:	2b40      	cmp	r3, #64	; 0x40
 8002e9e:	d058      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x13a>
 8002ea0:	2b40      	cmp	r3, #64	; 0x40
 8002ea2:	d86f      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea4:	2b30      	cmp	r3, #48	; 0x30
 8002ea6:	d064      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea8:	2b30      	cmp	r3, #48	; 0x30
 8002eaa:	d86b      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d060      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d867      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d05c      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d05a      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x15a>
 8002ebc:	e062      	b.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6899      	ldr	r1, [r3, #8]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f000 f965 	bl	800319c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ee0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	609a      	str	r2, [r3, #8]
      break;
 8002eea:	e04f      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6899      	ldr	r1, [r3, #8]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f000 f94e 	bl	800319c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f0e:	609a      	str	r2, [r3, #8]
      break;
 8002f10:	e03c      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f000 f8c2 	bl	80030a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2150      	movs	r1, #80	; 0x50
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f91b 	bl	8003166 <TIM_ITRx_SetConfig>
      break;
 8002f30:	e02c      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f000 f8e1 	bl	8003106 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2160      	movs	r1, #96	; 0x60
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 f90b 	bl	8003166 <TIM_ITRx_SetConfig>
      break;
 8002f50:	e01c      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f000 f8a2 	bl	80030a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2140      	movs	r1, #64	; 0x40
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f8fb 	bl	8003166 <TIM_ITRx_SetConfig>
      break;
 8002f70:	e00c      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f000 f8f2 	bl	8003166 <TIM_ITRx_SetConfig>
      break;
 8002f82:	e003      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      break;
 8002f88:	e000      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a34      	ldr	r2, [pc, #208]	; (800308c <TIM_Base_SetConfig+0xe4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00f      	beq.n	8002fe0 <TIM_Base_SetConfig+0x38>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc6:	d00b      	beq.n	8002fe0 <TIM_Base_SetConfig+0x38>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a31      	ldr	r2, [pc, #196]	; (8003090 <TIM_Base_SetConfig+0xe8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d007      	beq.n	8002fe0 <TIM_Base_SetConfig+0x38>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a30      	ldr	r2, [pc, #192]	; (8003094 <TIM_Base_SetConfig+0xec>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <TIM_Base_SetConfig+0x38>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a2f      	ldr	r2, [pc, #188]	; (8003098 <TIM_Base_SetConfig+0xf0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d108      	bne.n	8002ff2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a25      	ldr	r2, [pc, #148]	; (800308c <TIM_Base_SetConfig+0xe4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01b      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003000:	d017      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a22      	ldr	r2, [pc, #136]	; (8003090 <TIM_Base_SetConfig+0xe8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a21      	ldr	r2, [pc, #132]	; (8003094 <TIM_Base_SetConfig+0xec>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00f      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a20      	ldr	r2, [pc, #128]	; (8003098 <TIM_Base_SetConfig+0xf0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00b      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a1f      	ldr	r2, [pc, #124]	; (800309c <TIM_Base_SetConfig+0xf4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a1e      	ldr	r2, [pc, #120]	; (80030a0 <TIM_Base_SetConfig+0xf8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d003      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <TIM_Base_SetConfig+0xfc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d108      	bne.n	8003044 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <TIM_Base_SetConfig+0xe4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d103      	bne.n	8003078 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	615a      	str	r2, [r3, #20]
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40010000 	.word	0x40010000
 8003090:	40000400 	.word	0x40000400
 8003094:	40000800 	.word	0x40000800
 8003098:	40000c00 	.word	0x40000c00
 800309c:	40014000 	.word	0x40014000
 80030a0:	40014400 	.word	0x40014400
 80030a4:	40014800 	.word	0x40014800

080030a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f023 0201 	bic.w	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f023 030a 	bic.w	r3, r3, #10
 80030e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	621a      	str	r2, [r3, #32]
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003106:	b480      	push	{r7}
 8003108:	b087      	sub	sp, #28
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	f023 0210 	bic.w	r2, r3, #16
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	031b      	lsls	r3, r3, #12
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003142:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	f043 0307 	orr.w	r3, r3, #7
 8003188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	609a      	str	r2, [r3, #8]
}
 8003190:	bf00      	nop
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	021a      	lsls	r2, r3, #8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	431a      	orrs	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	609a      	str	r2, [r3, #8]
}
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e050      	b.n	8003296 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1c      	ldr	r2, [pc, #112]	; (80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d018      	beq.n	800326a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003240:	d013      	beq.n	800326a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a18      	ldr	r2, [pc, #96]	; (80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00e      	beq.n	800326a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a16      	ldr	r2, [pc, #88]	; (80032ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d009      	beq.n	800326a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a15      	ldr	r2, [pc, #84]	; (80032b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d004      	beq.n	800326a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10c      	bne.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	4313      	orrs	r3, r2
 800327a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40000c00 	.word	0x40000c00
 80032b4:	40014000 	.word	0x40014000

080032b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e03f      	b.n	800334a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fe faea 	bl	80018b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	; 0x24
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fddf 	bl	8003ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b08a      	sub	sp, #40	; 0x28
 8003356:	af02      	add	r7, sp, #8
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b20      	cmp	r3, #32
 8003370:	d17c      	bne.n	800346c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_UART_Transmit+0x2c>
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e075      	b.n	800346e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_UART_Transmit+0x3e>
 800338c:	2302      	movs	r3, #2
 800338e:	e06e      	b.n	800346e <HAL_UART_Transmit+0x11c>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2221      	movs	r2, #33	; 0x21
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033a6:	f7fe fc31 	bl	8001c0c <HAL_GetTick>
 80033aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	88fa      	ldrh	r2, [r7, #6]
 80033b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	88fa      	ldrh	r2, [r7, #6]
 80033b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c0:	d108      	bne.n	80033d4 <HAL_UART_Transmit+0x82>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d104      	bne.n	80033d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	e003      	b.n	80033dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033e4:	e02a      	b.n	800343c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2200      	movs	r2, #0
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fb1f 	bl	8003a34 <UART_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e036      	b.n	800346e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003414:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	3302      	adds	r3, #2
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	e007      	b.n	800342e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	3301      	adds	r3, #1
 800342c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1cf      	bne.n	80033e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2200      	movs	r2, #0
 800344e:	2140      	movs	r1, #64	; 0x40
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 faef 	bl	8003a34 <UART_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e006      	b.n	800346e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	4613      	mov	r3, r2
 8003482:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b20      	cmp	r3, #32
 800348e:	d11d      	bne.n	80034cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_UART_Receive_IT+0x26>
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e016      	b.n	80034ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_UART_Receive_IT+0x38>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e00f      	b.n	80034ce <HAL_UART_Receive_IT+0x58>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	461a      	mov	r2, r3
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 fb24 	bl	8003b10 <UART_Start_Receive_IT>
 80034c8:	4603      	mov	r3, r0
 80034ca:	e000      	b.n	80034ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b0ba      	sub	sp, #232	; 0xe8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800350a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10f      	bne.n	800353e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800351e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_UART_IRQHandler+0x66>
 800352a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fc07 	bl	8003d4a <UART_Receive_IT>
      return;
 800353c:	e256      	b.n	80039ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800353e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80de 	beq.w	8003704 <HAL_UART_IRQHandler+0x22c>
 8003548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003558:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80d1 	beq.w	8003704 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_UART_IRQHandler+0xae>
 800356e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <HAL_UART_IRQHandler+0xd2>
 8003592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f043 0202 	orr.w	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00b      	beq.n	80035ce <HAL_UART_IRQHandler+0xf6>
 80035b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f043 0204 	orr.w	r2, r3, #4
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d011      	beq.n	80035fe <HAL_UART_IRQHandler+0x126>
 80035da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f043 0208 	orr.w	r2, r3, #8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 81ed 	beq.w	80039e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_UART_IRQHandler+0x14e>
 8003614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fb92 	bl	8003d4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	2b40      	cmp	r3, #64	; 0x40
 8003632:	bf0c      	ite	eq
 8003634:	2301      	moveq	r3, #1
 8003636:	2300      	movne	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <HAL_UART_IRQHandler+0x17a>
 800364a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d04f      	beq.n	80036f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fa9a 	bl	8003b8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d141      	bne.n	80036ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3314      	adds	r3, #20
 800366c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800367c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3314      	adds	r3, #20
 800368e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003692:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800369e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1d9      	bne.n	8003666 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d013      	beq.n	80036e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	4a7d      	ldr	r2, [pc, #500]	; (80038b4 <HAL_UART_IRQHandler+0x3dc>)
 80036c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe fc51 	bl	8001f6e <HAL_DMA_Abort_IT>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d016      	beq.n	8003700 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036dc:	4610      	mov	r0, r2
 80036de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	e00e      	b.n	8003700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f990 	bl	8003a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e8:	e00a      	b.n	8003700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f98c 	bl	8003a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f0:	e006      	b.n	8003700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f988 	bl	8003a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036fe:	e170      	b.n	80039e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003700:	bf00      	nop
    return;
 8003702:	e16e      	b.n	80039e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	2b01      	cmp	r3, #1
 800370a:	f040 814a 	bne.w	80039a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8143 	beq.w	80039a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800371c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 813c 	beq.w	80039a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374a:	2b40      	cmp	r3, #64	; 0x40
 800374c:	f040 80b4 	bne.w	80038b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800375c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8140 	beq.w	80039e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800376a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800376e:	429a      	cmp	r2, r3
 8003770:	f080 8139 	bcs.w	80039e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800377a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003786:	f000 8088 	beq.w	800389a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	330c      	adds	r3, #12
 8003790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1d9      	bne.n	800378a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3314      	adds	r3, #20
 80037dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3314      	adds	r3, #20
 80037f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003802:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800380c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e1      	bne.n	80037d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3314      	adds	r3, #20
 8003818:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3314      	adds	r3, #20
 8003832:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003836:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003838:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800383c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800383e:	e841 2300 	strex	r3, r2, [r1]
 8003842:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e3      	bne.n	8003812 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	330c      	adds	r3, #12
 800385e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800386a:	f023 0310 	bic.w	r3, r3, #16
 800386e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	330c      	adds	r3, #12
 8003878:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800387c:	65ba      	str	r2, [r7, #88]	; 0x58
 800387e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003882:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800388a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e3      	bne.n	8003858 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe fafa 	bl	8001e8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	4619      	mov	r1, r3
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f8b6 	bl	8003a1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038b0:	e099      	b.n	80039e6 <HAL_UART_IRQHandler+0x50e>
 80038b2:	bf00      	nop
 80038b4:	08003c53 	.word	0x08003c53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 808b 	beq.w	80039ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80038d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8086 	beq.w	80039ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	330c      	adds	r3, #12
 80038e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003902:	647a      	str	r2, [r7, #68]	; 0x44
 8003904:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e3      	bne.n	80038de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3314      	adds	r3, #20
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	623b      	str	r3, [r7, #32]
   return(result);
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	f023 0301 	bic.w	r3, r3, #1
 800392c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3314      	adds	r3, #20
 8003936:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800393a:	633a      	str	r2, [r7, #48]	; 0x30
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1e3      	bne.n	8003916 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	330c      	adds	r3, #12
 8003962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	60fb      	str	r3, [r7, #12]
   return(result);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0310 	bic.w	r3, r3, #16
 8003972:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	330c      	adds	r3, #12
 800397c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003980:	61fa      	str	r2, [r7, #28]
 8003982:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003984:	69b9      	ldr	r1, [r7, #24]
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	e841 2300 	strex	r3, r2, [r1]
 800398c:	617b      	str	r3, [r7, #20]
   return(result);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1e3      	bne.n	800395c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003998:	4619      	mov	r1, r3
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f83e 	bl	8003a1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039a0:	e023      	b.n	80039ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_UART_IRQHandler+0x4ea>
 80039ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f95d 	bl	8003c7a <UART_Transmit_IT>
    return;
 80039c0:	e014      	b.n	80039ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00e      	beq.n	80039ec <HAL_UART_IRQHandler+0x514>
 80039ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f99d 	bl	8003d1a <UART_EndTransmit_IT>
    return;
 80039e0:	e004      	b.n	80039ec <HAL_UART_IRQHandler+0x514>
    return;
 80039e2:	bf00      	nop
 80039e4:	e002      	b.n	80039ec <HAL_UART_IRQHandler+0x514>
      return;
 80039e6:	bf00      	nop
 80039e8:	e000      	b.n	80039ec <HAL_UART_IRQHandler+0x514>
      return;
 80039ea:	bf00      	nop
  }
}
 80039ec:	37e8      	adds	r7, #232	; 0xe8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop

080039f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b090      	sub	sp, #64	; 0x40
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a44:	e050      	b.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d04c      	beq.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d007      	beq.n	8003a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a54:	f7fe f8da 	bl	8001c0c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d241      	bcs.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	330c      	adds	r3, #12
 8003a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a84:	637a      	str	r2, [r7, #52]	; 0x34
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e5      	bne.n	8003a64 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3314      	adds	r3, #20
 8003a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f023 0301 	bic.w	r3, r3, #1
 8003aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3314      	adds	r3, #20
 8003ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ab8:	623a      	str	r2, [r7, #32]
 8003aba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	69f9      	ldr	r1, [r7, #28]
 8003abe:	6a3a      	ldr	r2, [r7, #32]
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e5      	bne.n	8003a98 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e00f      	b.n	8003b08 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4013      	ands	r3, r2
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d09f      	beq.n	8003a46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3740      	adds	r7, #64	; 0x40
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	88fa      	ldrh	r2, [r7, #6]
 8003b28:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	88fa      	ldrh	r2, [r7, #6]
 8003b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2222      	movs	r2, #34	; 0x22
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0220 	orr.w	r2, r2, #32
 8003b7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b095      	sub	sp, #84	; 0x54
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	e853 3f00 	ldrex	r3, [r3]
 8003ba2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bb4:	643a      	str	r2, [r7, #64]	; 0x40
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bbc:	e841 2300 	strex	r3, r2, [r1]
 8003bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e5      	bne.n	8003b94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3314      	adds	r3, #20
 8003bce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3314      	adds	r3, #20
 8003be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003be8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e5      	bne.n	8003bc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d119      	bne.n	8003c38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f023 0310 	bic.w	r3, r3, #16
 8003c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	330c      	adds	r3, #12
 8003c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c24:	61ba      	str	r2, [r7, #24]
 8003c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6979      	ldr	r1, [r7, #20]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	613b      	str	r3, [r7, #16]
   return(result);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e5      	bne.n	8003c04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c46:	bf00      	nop
 8003c48:	3754      	adds	r7, #84	; 0x54
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f7ff fecb 	bl	8003a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c72:	bf00      	nop
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b085      	sub	sp, #20
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b21      	cmp	r3, #33	; 0x21
 8003c8c:	d13e      	bne.n	8003d0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	d114      	bne.n	8003cc2 <UART_Transmit_IT+0x48>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d110      	bne.n	8003cc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	1c9a      	adds	r2, r3, #2
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	621a      	str	r2, [r3, #32]
 8003cc0:	e008      	b.n	8003cd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	1c59      	adds	r1, r3, #1
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6211      	str	r1, [r2, #32]
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10f      	bne.n	8003d08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e000      	b.n	8003d0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d0c:	2302      	movs	r3, #2
  }
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fe5a 	bl	80039f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b08c      	sub	sp, #48	; 0x30
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b22      	cmp	r3, #34	; 0x22
 8003d5c:	f040 80ab 	bne.w	8003eb6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d68:	d117      	bne.n	8003d9a <UART_Receive_IT+0x50>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d113      	bne.n	8003d9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	1c9a      	adds	r2, r3, #2
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
 8003d98:	e026      	b.n	8003de8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dac:	d007      	beq.n	8003dbe <UART_Receive_IT+0x74>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <UART_Receive_IT+0x82>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e008      	b.n	8003dde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4619      	mov	r1, r3
 8003df6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d15a      	bne.n	8003eb2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0220 	bic.w	r2, r2, #32
 8003e0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0201 	bic.w	r2, r2, #1
 8003e2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d135      	bne.n	8003ea8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	613b      	str	r3, [r7, #16]
   return(result);
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f023 0310 	bic.w	r3, r3, #16
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	623a      	str	r2, [r7, #32]
 8003e64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	69f9      	ldr	r1, [r7, #28]
 8003e68:	6a3a      	ldr	r2, [r7, #32]
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e5      	bne.n	8003e42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d10a      	bne.n	8003e9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff fdbb 	bl	8003a1c <HAL_UARTEx_RxEventCallback>
 8003ea6:	e002      	b.n	8003eae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7fc fff9 	bl	8000ea0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e002      	b.n	8003eb8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e000      	b.n	8003eb8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3730      	adds	r7, #48	; 0x30
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec4:	b0c0      	sub	sp, #256	; 0x100
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	68d9      	ldr	r1, [r3, #12]
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	ea40 0301 	orr.w	r3, r0, r1
 8003ee8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f18:	f021 010c 	bic.w	r1, r1, #12
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f26:	430b      	orrs	r3, r1
 8003f28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3a:	6999      	ldr	r1, [r3, #24]
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	ea40 0301 	orr.w	r3, r0, r1
 8003f46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4b8f      	ldr	r3, [pc, #572]	; (800418c <UART_SetConfig+0x2cc>)
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d005      	beq.n	8003f60 <UART_SetConfig+0xa0>
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b8d      	ldr	r3, [pc, #564]	; (8004190 <UART_SetConfig+0x2d0>)
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d104      	bne.n	8003f6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f60:	f7fe fe94 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 8003f64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f68:	e003      	b.n	8003f72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f6a:	f7fe fe7b 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8003f6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7c:	f040 810c 	bne.w	8004198 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f92:	4622      	mov	r2, r4
 8003f94:	462b      	mov	r3, r5
 8003f96:	1891      	adds	r1, r2, r2
 8003f98:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f9a:	415b      	adcs	r3, r3
 8003f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	eb12 0801 	adds.w	r8, r2, r1
 8003fa8:	4629      	mov	r1, r5
 8003faa:	eb43 0901 	adc.w	r9, r3, r1
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fc2:	4690      	mov	r8, r2
 8003fc4:	4699      	mov	r9, r3
 8003fc6:	4623      	mov	r3, r4
 8003fc8:	eb18 0303 	adds.w	r3, r8, r3
 8003fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fd0:	462b      	mov	r3, r5
 8003fd2:	eb49 0303 	adc.w	r3, r9, r3
 8003fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fe6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fee:	460b      	mov	r3, r1
 8003ff0:	18db      	adds	r3, r3, r3
 8003ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	eb42 0303 	adc.w	r3, r2, r3
 8003ffa:	657b      	str	r3, [r7, #84]	; 0x54
 8003ffc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004000:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004004:	f7fc fdc8 	bl	8000b98 <__aeabi_uldivmod>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4b61      	ldr	r3, [pc, #388]	; (8004194 <UART_SetConfig+0x2d4>)
 800400e:	fba3 2302 	umull	r2, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	011c      	lsls	r4, r3, #4
 8004016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800401a:	2200      	movs	r2, #0
 800401c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004020:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004024:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	1891      	adds	r1, r2, r2
 800402e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004030:	415b      	adcs	r3, r3
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004034:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004038:	4641      	mov	r1, r8
 800403a:	eb12 0a01 	adds.w	sl, r2, r1
 800403e:	4649      	mov	r1, r9
 8004040:	eb43 0b01 	adc.w	fp, r3, r1
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004050:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004058:	4692      	mov	sl, r2
 800405a:	469b      	mov	fp, r3
 800405c:	4643      	mov	r3, r8
 800405e:	eb1a 0303 	adds.w	r3, sl, r3
 8004062:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004066:	464b      	mov	r3, r9
 8004068:	eb4b 0303 	adc.w	r3, fp, r3
 800406c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800407c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004080:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004084:	460b      	mov	r3, r1
 8004086:	18db      	adds	r3, r3, r3
 8004088:	643b      	str	r3, [r7, #64]	; 0x40
 800408a:	4613      	mov	r3, r2
 800408c:	eb42 0303 	adc.w	r3, r2, r3
 8004090:	647b      	str	r3, [r7, #68]	; 0x44
 8004092:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004096:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800409a:	f7fc fd7d 	bl	8000b98 <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <UART_SetConfig+0x2d4>)
 80040a6:	fba3 2301 	umull	r2, r3, r3, r1
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2264      	movs	r2, #100	; 0x64
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	1acb      	subs	r3, r1, r3
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040ba:	4b36      	ldr	r3, [pc, #216]	; (8004194 <UART_SetConfig+0x2d4>)
 80040bc:	fba3 2302 	umull	r2, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040c8:	441c      	add	r4, r3
 80040ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	1891      	adds	r1, r2, r2
 80040e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80040e4:	415b      	adcs	r3, r3
 80040e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040ec:	4641      	mov	r1, r8
 80040ee:	1851      	adds	r1, r2, r1
 80040f0:	6339      	str	r1, [r7, #48]	; 0x30
 80040f2:	4649      	mov	r1, r9
 80040f4:	414b      	adcs	r3, r1
 80040f6:	637b      	str	r3, [r7, #52]	; 0x34
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004104:	4659      	mov	r1, fp
 8004106:	00cb      	lsls	r3, r1, #3
 8004108:	4651      	mov	r1, sl
 800410a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410e:	4651      	mov	r1, sl
 8004110:	00ca      	lsls	r2, r1, #3
 8004112:	4610      	mov	r0, r2
 8004114:	4619      	mov	r1, r3
 8004116:	4603      	mov	r3, r0
 8004118:	4642      	mov	r2, r8
 800411a:	189b      	adds	r3, r3, r2
 800411c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004120:	464b      	mov	r3, r9
 8004122:	460a      	mov	r2, r1
 8004124:	eb42 0303 	adc.w	r3, r2, r3
 8004128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004138:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800413c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004140:	460b      	mov	r3, r1
 8004142:	18db      	adds	r3, r3, r3
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
 8004146:	4613      	mov	r3, r2
 8004148:	eb42 0303 	adc.w	r3, r2, r3
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800414e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004152:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004156:	f7fc fd1f 	bl	8000b98 <__aeabi_uldivmod>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <UART_SetConfig+0x2d4>)
 8004160:	fba3 1302 	umull	r1, r3, r3, r2
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	2164      	movs	r1, #100	; 0x64
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	3332      	adds	r3, #50	; 0x32
 8004172:	4a08      	ldr	r2, [pc, #32]	; (8004194 <UART_SetConfig+0x2d4>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	f003 0207 	and.w	r2, r3, #7
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4422      	add	r2, r4
 8004186:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004188:	e105      	b.n	8004396 <UART_SetConfig+0x4d6>
 800418a:	bf00      	nop
 800418c:	40011000 	.word	0x40011000
 8004190:	40011400 	.word	0x40011400
 8004194:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800419c:	2200      	movs	r2, #0
 800419e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041aa:	4642      	mov	r2, r8
 80041ac:	464b      	mov	r3, r9
 80041ae:	1891      	adds	r1, r2, r2
 80041b0:	6239      	str	r1, [r7, #32]
 80041b2:	415b      	adcs	r3, r3
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
 80041b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ba:	4641      	mov	r1, r8
 80041bc:	1854      	adds	r4, r2, r1
 80041be:	4649      	mov	r1, r9
 80041c0:	eb43 0501 	adc.w	r5, r3, r1
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	00eb      	lsls	r3, r5, #3
 80041ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d2:	00e2      	lsls	r2, r4, #3
 80041d4:	4614      	mov	r4, r2
 80041d6:	461d      	mov	r5, r3
 80041d8:	4643      	mov	r3, r8
 80041da:	18e3      	adds	r3, r4, r3
 80041dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041e0:	464b      	mov	r3, r9
 80041e2:	eb45 0303 	adc.w	r3, r5, r3
 80041e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004206:	4629      	mov	r1, r5
 8004208:	008b      	lsls	r3, r1, #2
 800420a:	4621      	mov	r1, r4
 800420c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004210:	4621      	mov	r1, r4
 8004212:	008a      	lsls	r2, r1, #2
 8004214:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004218:	f7fc fcbe 	bl	8000b98 <__aeabi_uldivmod>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4b60      	ldr	r3, [pc, #384]	; (80043a4 <UART_SetConfig+0x4e4>)
 8004222:	fba3 2302 	umull	r2, r3, r3, r2
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	011c      	lsls	r4, r3, #4
 800422a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800422e:	2200      	movs	r2, #0
 8004230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004234:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004238:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800423c:	4642      	mov	r2, r8
 800423e:	464b      	mov	r3, r9
 8004240:	1891      	adds	r1, r2, r2
 8004242:	61b9      	str	r1, [r7, #24]
 8004244:	415b      	adcs	r3, r3
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800424c:	4641      	mov	r1, r8
 800424e:	1851      	adds	r1, r2, r1
 8004250:	6139      	str	r1, [r7, #16]
 8004252:	4649      	mov	r1, r9
 8004254:	414b      	adcs	r3, r1
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004264:	4659      	mov	r1, fp
 8004266:	00cb      	lsls	r3, r1, #3
 8004268:	4651      	mov	r1, sl
 800426a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426e:	4651      	mov	r1, sl
 8004270:	00ca      	lsls	r2, r1, #3
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	4603      	mov	r3, r0
 8004278:	4642      	mov	r2, r8
 800427a:	189b      	adds	r3, r3, r2
 800427c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004280:	464b      	mov	r3, r9
 8004282:	460a      	mov	r2, r1
 8004284:	eb42 0303 	adc.w	r3, r2, r3
 8004288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	67bb      	str	r3, [r7, #120]	; 0x78
 8004296:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042a4:	4649      	mov	r1, r9
 80042a6:	008b      	lsls	r3, r1, #2
 80042a8:	4641      	mov	r1, r8
 80042aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ae:	4641      	mov	r1, r8
 80042b0:	008a      	lsls	r2, r1, #2
 80042b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042b6:	f7fc fc6f 	bl	8000b98 <__aeabi_uldivmod>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <UART_SetConfig+0x4e4>)
 80042c0:	fba3 1302 	umull	r1, r3, r3, r2
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	2164      	movs	r1, #100	; 0x64
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	3332      	adds	r3, #50	; 0x32
 80042d2:	4a34      	ldr	r2, [pc, #208]	; (80043a4 <UART_SetConfig+0x4e4>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042de:	441c      	add	r4, r3
 80042e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042e4:	2200      	movs	r2, #0
 80042e6:	673b      	str	r3, [r7, #112]	; 0x70
 80042e8:	677a      	str	r2, [r7, #116]	; 0x74
 80042ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042ee:	4642      	mov	r2, r8
 80042f0:	464b      	mov	r3, r9
 80042f2:	1891      	adds	r1, r2, r2
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	415b      	adcs	r3, r3
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042fe:	4641      	mov	r1, r8
 8004300:	1851      	adds	r1, r2, r1
 8004302:	6039      	str	r1, [r7, #0]
 8004304:	4649      	mov	r1, r9
 8004306:	414b      	adcs	r3, r1
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004316:	4659      	mov	r1, fp
 8004318:	00cb      	lsls	r3, r1, #3
 800431a:	4651      	mov	r1, sl
 800431c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004320:	4651      	mov	r1, sl
 8004322:	00ca      	lsls	r2, r1, #3
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	4603      	mov	r3, r0
 800432a:	4642      	mov	r2, r8
 800432c:	189b      	adds	r3, r3, r2
 800432e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004330:	464b      	mov	r3, r9
 8004332:	460a      	mov	r2, r1
 8004334:	eb42 0303 	adc.w	r3, r2, r3
 8004338:	66fb      	str	r3, [r7, #108]	; 0x6c
 800433a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	663b      	str	r3, [r7, #96]	; 0x60
 8004344:	667a      	str	r2, [r7, #100]	; 0x64
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004352:	4649      	mov	r1, r9
 8004354:	008b      	lsls	r3, r1, #2
 8004356:	4641      	mov	r1, r8
 8004358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800435c:	4641      	mov	r1, r8
 800435e:	008a      	lsls	r2, r1, #2
 8004360:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004364:	f7fc fc18 	bl	8000b98 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <UART_SetConfig+0x4e4>)
 800436e:	fba3 1302 	umull	r1, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2164      	movs	r1, #100	; 0x64
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	3332      	adds	r3, #50	; 0x32
 8004380:	4a08      	ldr	r2, [pc, #32]	; (80043a4 <UART_SetConfig+0x4e4>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4422      	add	r2, r4
 8004394:	609a      	str	r2, [r3, #8]
}
 8004396:	bf00      	nop
 8004398:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800439c:	46bd      	mov	sp, r7
 800439e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a2:	bf00      	nop
 80043a4:	51eb851f 	.word	0x51eb851f

080043a8 <__errno>:
 80043a8:	4b01      	ldr	r3, [pc, #4]	; (80043b0 <__errno+0x8>)
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	2000000c 	.word	0x2000000c

080043b4 <__libc_init_array>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	4d0d      	ldr	r5, [pc, #52]	; (80043ec <__libc_init_array+0x38>)
 80043b8:	4c0d      	ldr	r4, [pc, #52]	; (80043f0 <__libc_init_array+0x3c>)
 80043ba:	1b64      	subs	r4, r4, r5
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	2600      	movs	r6, #0
 80043c0:	42a6      	cmp	r6, r4
 80043c2:	d109      	bne.n	80043d8 <__libc_init_array+0x24>
 80043c4:	4d0b      	ldr	r5, [pc, #44]	; (80043f4 <__libc_init_array+0x40>)
 80043c6:	4c0c      	ldr	r4, [pc, #48]	; (80043f8 <__libc_init_array+0x44>)
 80043c8:	f001 fba8 	bl	8005b1c <_init>
 80043cc:	1b64      	subs	r4, r4, r5
 80043ce:	10a4      	asrs	r4, r4, #2
 80043d0:	2600      	movs	r6, #0
 80043d2:	42a6      	cmp	r6, r4
 80043d4:	d105      	bne.n	80043e2 <__libc_init_array+0x2e>
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043dc:	4798      	blx	r3
 80043de:	3601      	adds	r6, #1
 80043e0:	e7ee      	b.n	80043c0 <__libc_init_array+0xc>
 80043e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e6:	4798      	blx	r3
 80043e8:	3601      	adds	r6, #1
 80043ea:	e7f2      	b.n	80043d2 <__libc_init_array+0x1e>
 80043ec:	08005bc8 	.word	0x08005bc8
 80043f0:	08005bc8 	.word	0x08005bc8
 80043f4:	08005bc8 	.word	0x08005bc8
 80043f8:	08005bcc 	.word	0x08005bcc

080043fc <memset>:
 80043fc:	4402      	add	r2, r0
 80043fe:	4603      	mov	r3, r0
 8004400:	4293      	cmp	r3, r2
 8004402:	d100      	bne.n	8004406 <memset+0xa>
 8004404:	4770      	bx	lr
 8004406:	f803 1b01 	strb.w	r1, [r3], #1
 800440a:	e7f9      	b.n	8004400 <memset+0x4>

0800440c <siprintf>:
 800440c:	b40e      	push	{r1, r2, r3}
 800440e:	b500      	push	{lr}
 8004410:	b09c      	sub	sp, #112	; 0x70
 8004412:	ab1d      	add	r3, sp, #116	; 0x74
 8004414:	9002      	str	r0, [sp, #8]
 8004416:	9006      	str	r0, [sp, #24]
 8004418:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800441c:	4809      	ldr	r0, [pc, #36]	; (8004444 <siprintf+0x38>)
 800441e:	9107      	str	r1, [sp, #28]
 8004420:	9104      	str	r1, [sp, #16]
 8004422:	4909      	ldr	r1, [pc, #36]	; (8004448 <siprintf+0x3c>)
 8004424:	f853 2b04 	ldr.w	r2, [r3], #4
 8004428:	9105      	str	r1, [sp, #20]
 800442a:	6800      	ldr	r0, [r0, #0]
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	a902      	add	r1, sp, #8
 8004430:	f000 f868 	bl	8004504 <_svfiprintf_r>
 8004434:	9b02      	ldr	r3, [sp, #8]
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	b01c      	add	sp, #112	; 0x70
 800443c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004440:	b003      	add	sp, #12
 8004442:	4770      	bx	lr
 8004444:	2000000c 	.word	0x2000000c
 8004448:	ffff0208 	.word	0xffff0208

0800444c <__ssputs_r>:
 800444c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004450:	688e      	ldr	r6, [r1, #8]
 8004452:	429e      	cmp	r6, r3
 8004454:	4682      	mov	sl, r0
 8004456:	460c      	mov	r4, r1
 8004458:	4690      	mov	r8, r2
 800445a:	461f      	mov	r7, r3
 800445c:	d838      	bhi.n	80044d0 <__ssputs_r+0x84>
 800445e:	898a      	ldrh	r2, [r1, #12]
 8004460:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004464:	d032      	beq.n	80044cc <__ssputs_r+0x80>
 8004466:	6825      	ldr	r5, [r4, #0]
 8004468:	6909      	ldr	r1, [r1, #16]
 800446a:	eba5 0901 	sub.w	r9, r5, r1
 800446e:	6965      	ldr	r5, [r4, #20]
 8004470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004474:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004478:	3301      	adds	r3, #1
 800447a:	444b      	add	r3, r9
 800447c:	106d      	asrs	r5, r5, #1
 800447e:	429d      	cmp	r5, r3
 8004480:	bf38      	it	cc
 8004482:	461d      	movcc	r5, r3
 8004484:	0553      	lsls	r3, r2, #21
 8004486:	d531      	bpl.n	80044ec <__ssputs_r+0xa0>
 8004488:	4629      	mov	r1, r5
 800448a:	f000 fb63 	bl	8004b54 <_malloc_r>
 800448e:	4606      	mov	r6, r0
 8004490:	b950      	cbnz	r0, 80044a8 <__ssputs_r+0x5c>
 8004492:	230c      	movs	r3, #12
 8004494:	f8ca 3000 	str.w	r3, [sl]
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800449e:	81a3      	strh	r3, [r4, #12]
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a8:	6921      	ldr	r1, [r4, #16]
 80044aa:	464a      	mov	r2, r9
 80044ac:	f000 fabe 	bl	8004a2c <memcpy>
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ba:	81a3      	strh	r3, [r4, #12]
 80044bc:	6126      	str	r6, [r4, #16]
 80044be:	6165      	str	r5, [r4, #20]
 80044c0:	444e      	add	r6, r9
 80044c2:	eba5 0509 	sub.w	r5, r5, r9
 80044c6:	6026      	str	r6, [r4, #0]
 80044c8:	60a5      	str	r5, [r4, #8]
 80044ca:	463e      	mov	r6, r7
 80044cc:	42be      	cmp	r6, r7
 80044ce:	d900      	bls.n	80044d2 <__ssputs_r+0x86>
 80044d0:	463e      	mov	r6, r7
 80044d2:	6820      	ldr	r0, [r4, #0]
 80044d4:	4632      	mov	r2, r6
 80044d6:	4641      	mov	r1, r8
 80044d8:	f000 fab6 	bl	8004a48 <memmove>
 80044dc:	68a3      	ldr	r3, [r4, #8]
 80044de:	1b9b      	subs	r3, r3, r6
 80044e0:	60a3      	str	r3, [r4, #8]
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	4433      	add	r3, r6
 80044e6:	6023      	str	r3, [r4, #0]
 80044e8:	2000      	movs	r0, #0
 80044ea:	e7db      	b.n	80044a4 <__ssputs_r+0x58>
 80044ec:	462a      	mov	r2, r5
 80044ee:	f000 fba5 	bl	8004c3c <_realloc_r>
 80044f2:	4606      	mov	r6, r0
 80044f4:	2800      	cmp	r0, #0
 80044f6:	d1e1      	bne.n	80044bc <__ssputs_r+0x70>
 80044f8:	6921      	ldr	r1, [r4, #16]
 80044fa:	4650      	mov	r0, sl
 80044fc:	f000 fabe 	bl	8004a7c <_free_r>
 8004500:	e7c7      	b.n	8004492 <__ssputs_r+0x46>
	...

08004504 <_svfiprintf_r>:
 8004504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004508:	4698      	mov	r8, r3
 800450a:	898b      	ldrh	r3, [r1, #12]
 800450c:	061b      	lsls	r3, r3, #24
 800450e:	b09d      	sub	sp, #116	; 0x74
 8004510:	4607      	mov	r7, r0
 8004512:	460d      	mov	r5, r1
 8004514:	4614      	mov	r4, r2
 8004516:	d50e      	bpl.n	8004536 <_svfiprintf_r+0x32>
 8004518:	690b      	ldr	r3, [r1, #16]
 800451a:	b963      	cbnz	r3, 8004536 <_svfiprintf_r+0x32>
 800451c:	2140      	movs	r1, #64	; 0x40
 800451e:	f000 fb19 	bl	8004b54 <_malloc_r>
 8004522:	6028      	str	r0, [r5, #0]
 8004524:	6128      	str	r0, [r5, #16]
 8004526:	b920      	cbnz	r0, 8004532 <_svfiprintf_r+0x2e>
 8004528:	230c      	movs	r3, #12
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	f04f 30ff 	mov.w	r0, #4294967295
 8004530:	e0d1      	b.n	80046d6 <_svfiprintf_r+0x1d2>
 8004532:	2340      	movs	r3, #64	; 0x40
 8004534:	616b      	str	r3, [r5, #20]
 8004536:	2300      	movs	r3, #0
 8004538:	9309      	str	r3, [sp, #36]	; 0x24
 800453a:	2320      	movs	r3, #32
 800453c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004540:	f8cd 800c 	str.w	r8, [sp, #12]
 8004544:	2330      	movs	r3, #48	; 0x30
 8004546:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80046f0 <_svfiprintf_r+0x1ec>
 800454a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800454e:	f04f 0901 	mov.w	r9, #1
 8004552:	4623      	mov	r3, r4
 8004554:	469a      	mov	sl, r3
 8004556:	f813 2b01 	ldrb.w	r2, [r3], #1
 800455a:	b10a      	cbz	r2, 8004560 <_svfiprintf_r+0x5c>
 800455c:	2a25      	cmp	r2, #37	; 0x25
 800455e:	d1f9      	bne.n	8004554 <_svfiprintf_r+0x50>
 8004560:	ebba 0b04 	subs.w	fp, sl, r4
 8004564:	d00b      	beq.n	800457e <_svfiprintf_r+0x7a>
 8004566:	465b      	mov	r3, fp
 8004568:	4622      	mov	r2, r4
 800456a:	4629      	mov	r1, r5
 800456c:	4638      	mov	r0, r7
 800456e:	f7ff ff6d 	bl	800444c <__ssputs_r>
 8004572:	3001      	adds	r0, #1
 8004574:	f000 80aa 	beq.w	80046cc <_svfiprintf_r+0x1c8>
 8004578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800457a:	445a      	add	r2, fp
 800457c:	9209      	str	r2, [sp, #36]	; 0x24
 800457e:	f89a 3000 	ldrb.w	r3, [sl]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80a2 	beq.w	80046cc <_svfiprintf_r+0x1c8>
 8004588:	2300      	movs	r3, #0
 800458a:	f04f 32ff 	mov.w	r2, #4294967295
 800458e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004592:	f10a 0a01 	add.w	sl, sl, #1
 8004596:	9304      	str	r3, [sp, #16]
 8004598:	9307      	str	r3, [sp, #28]
 800459a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800459e:	931a      	str	r3, [sp, #104]	; 0x68
 80045a0:	4654      	mov	r4, sl
 80045a2:	2205      	movs	r2, #5
 80045a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045a8:	4851      	ldr	r0, [pc, #324]	; (80046f0 <_svfiprintf_r+0x1ec>)
 80045aa:	f7fb fe19 	bl	80001e0 <memchr>
 80045ae:	9a04      	ldr	r2, [sp, #16]
 80045b0:	b9d8      	cbnz	r0, 80045ea <_svfiprintf_r+0xe6>
 80045b2:	06d0      	lsls	r0, r2, #27
 80045b4:	bf44      	itt	mi
 80045b6:	2320      	movmi	r3, #32
 80045b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045bc:	0711      	lsls	r1, r2, #28
 80045be:	bf44      	itt	mi
 80045c0:	232b      	movmi	r3, #43	; 0x2b
 80045c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045c6:	f89a 3000 	ldrb.w	r3, [sl]
 80045ca:	2b2a      	cmp	r3, #42	; 0x2a
 80045cc:	d015      	beq.n	80045fa <_svfiprintf_r+0xf6>
 80045ce:	9a07      	ldr	r2, [sp, #28]
 80045d0:	4654      	mov	r4, sl
 80045d2:	2000      	movs	r0, #0
 80045d4:	f04f 0c0a 	mov.w	ip, #10
 80045d8:	4621      	mov	r1, r4
 80045da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045de:	3b30      	subs	r3, #48	; 0x30
 80045e0:	2b09      	cmp	r3, #9
 80045e2:	d94e      	bls.n	8004682 <_svfiprintf_r+0x17e>
 80045e4:	b1b0      	cbz	r0, 8004614 <_svfiprintf_r+0x110>
 80045e6:	9207      	str	r2, [sp, #28]
 80045e8:	e014      	b.n	8004614 <_svfiprintf_r+0x110>
 80045ea:	eba0 0308 	sub.w	r3, r0, r8
 80045ee:	fa09 f303 	lsl.w	r3, r9, r3
 80045f2:	4313      	orrs	r3, r2
 80045f4:	9304      	str	r3, [sp, #16]
 80045f6:	46a2      	mov	sl, r4
 80045f8:	e7d2      	b.n	80045a0 <_svfiprintf_r+0x9c>
 80045fa:	9b03      	ldr	r3, [sp, #12]
 80045fc:	1d19      	adds	r1, r3, #4
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	9103      	str	r1, [sp, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	bfbb      	ittet	lt
 8004606:	425b      	neglt	r3, r3
 8004608:	f042 0202 	orrlt.w	r2, r2, #2
 800460c:	9307      	strge	r3, [sp, #28]
 800460e:	9307      	strlt	r3, [sp, #28]
 8004610:	bfb8      	it	lt
 8004612:	9204      	strlt	r2, [sp, #16]
 8004614:	7823      	ldrb	r3, [r4, #0]
 8004616:	2b2e      	cmp	r3, #46	; 0x2e
 8004618:	d10c      	bne.n	8004634 <_svfiprintf_r+0x130>
 800461a:	7863      	ldrb	r3, [r4, #1]
 800461c:	2b2a      	cmp	r3, #42	; 0x2a
 800461e:	d135      	bne.n	800468c <_svfiprintf_r+0x188>
 8004620:	9b03      	ldr	r3, [sp, #12]
 8004622:	1d1a      	adds	r2, r3, #4
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	9203      	str	r2, [sp, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	bfb8      	it	lt
 800462c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004630:	3402      	adds	r4, #2
 8004632:	9305      	str	r3, [sp, #20]
 8004634:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004700 <_svfiprintf_r+0x1fc>
 8004638:	7821      	ldrb	r1, [r4, #0]
 800463a:	2203      	movs	r2, #3
 800463c:	4650      	mov	r0, sl
 800463e:	f7fb fdcf 	bl	80001e0 <memchr>
 8004642:	b140      	cbz	r0, 8004656 <_svfiprintf_r+0x152>
 8004644:	2340      	movs	r3, #64	; 0x40
 8004646:	eba0 000a 	sub.w	r0, r0, sl
 800464a:	fa03 f000 	lsl.w	r0, r3, r0
 800464e:	9b04      	ldr	r3, [sp, #16]
 8004650:	4303      	orrs	r3, r0
 8004652:	3401      	adds	r4, #1
 8004654:	9304      	str	r3, [sp, #16]
 8004656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800465a:	4826      	ldr	r0, [pc, #152]	; (80046f4 <_svfiprintf_r+0x1f0>)
 800465c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004660:	2206      	movs	r2, #6
 8004662:	f7fb fdbd 	bl	80001e0 <memchr>
 8004666:	2800      	cmp	r0, #0
 8004668:	d038      	beq.n	80046dc <_svfiprintf_r+0x1d8>
 800466a:	4b23      	ldr	r3, [pc, #140]	; (80046f8 <_svfiprintf_r+0x1f4>)
 800466c:	bb1b      	cbnz	r3, 80046b6 <_svfiprintf_r+0x1b2>
 800466e:	9b03      	ldr	r3, [sp, #12]
 8004670:	3307      	adds	r3, #7
 8004672:	f023 0307 	bic.w	r3, r3, #7
 8004676:	3308      	adds	r3, #8
 8004678:	9303      	str	r3, [sp, #12]
 800467a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800467c:	4433      	add	r3, r6
 800467e:	9309      	str	r3, [sp, #36]	; 0x24
 8004680:	e767      	b.n	8004552 <_svfiprintf_r+0x4e>
 8004682:	fb0c 3202 	mla	r2, ip, r2, r3
 8004686:	460c      	mov	r4, r1
 8004688:	2001      	movs	r0, #1
 800468a:	e7a5      	b.n	80045d8 <_svfiprintf_r+0xd4>
 800468c:	2300      	movs	r3, #0
 800468e:	3401      	adds	r4, #1
 8004690:	9305      	str	r3, [sp, #20]
 8004692:	4619      	mov	r1, r3
 8004694:	f04f 0c0a 	mov.w	ip, #10
 8004698:	4620      	mov	r0, r4
 800469a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800469e:	3a30      	subs	r2, #48	; 0x30
 80046a0:	2a09      	cmp	r2, #9
 80046a2:	d903      	bls.n	80046ac <_svfiprintf_r+0x1a8>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0c5      	beq.n	8004634 <_svfiprintf_r+0x130>
 80046a8:	9105      	str	r1, [sp, #20]
 80046aa:	e7c3      	b.n	8004634 <_svfiprintf_r+0x130>
 80046ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80046b0:	4604      	mov	r4, r0
 80046b2:	2301      	movs	r3, #1
 80046b4:	e7f0      	b.n	8004698 <_svfiprintf_r+0x194>
 80046b6:	ab03      	add	r3, sp, #12
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	462a      	mov	r2, r5
 80046bc:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <_svfiprintf_r+0x1f8>)
 80046be:	a904      	add	r1, sp, #16
 80046c0:	4638      	mov	r0, r7
 80046c2:	f3af 8000 	nop.w
 80046c6:	1c42      	adds	r2, r0, #1
 80046c8:	4606      	mov	r6, r0
 80046ca:	d1d6      	bne.n	800467a <_svfiprintf_r+0x176>
 80046cc:	89ab      	ldrh	r3, [r5, #12]
 80046ce:	065b      	lsls	r3, r3, #25
 80046d0:	f53f af2c 	bmi.w	800452c <_svfiprintf_r+0x28>
 80046d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046d6:	b01d      	add	sp, #116	; 0x74
 80046d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046dc:	ab03      	add	r3, sp, #12
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	462a      	mov	r2, r5
 80046e2:	4b06      	ldr	r3, [pc, #24]	; (80046fc <_svfiprintf_r+0x1f8>)
 80046e4:	a904      	add	r1, sp, #16
 80046e6:	4638      	mov	r0, r7
 80046e8:	f000 f87a 	bl	80047e0 <_printf_i>
 80046ec:	e7eb      	b.n	80046c6 <_svfiprintf_r+0x1c2>
 80046ee:	bf00      	nop
 80046f0:	08005b5c 	.word	0x08005b5c
 80046f4:	08005b66 	.word	0x08005b66
 80046f8:	00000000 	.word	0x00000000
 80046fc:	0800444d 	.word	0x0800444d
 8004700:	08005b62 	.word	0x08005b62

08004704 <_printf_common>:
 8004704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	4616      	mov	r6, r2
 800470a:	4699      	mov	r9, r3
 800470c:	688a      	ldr	r2, [r1, #8]
 800470e:	690b      	ldr	r3, [r1, #16]
 8004710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004714:	4293      	cmp	r3, r2
 8004716:	bfb8      	it	lt
 8004718:	4613      	movlt	r3, r2
 800471a:	6033      	str	r3, [r6, #0]
 800471c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004720:	4607      	mov	r7, r0
 8004722:	460c      	mov	r4, r1
 8004724:	b10a      	cbz	r2, 800472a <_printf_common+0x26>
 8004726:	3301      	adds	r3, #1
 8004728:	6033      	str	r3, [r6, #0]
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	0699      	lsls	r1, r3, #26
 800472e:	bf42      	ittt	mi
 8004730:	6833      	ldrmi	r3, [r6, #0]
 8004732:	3302      	addmi	r3, #2
 8004734:	6033      	strmi	r3, [r6, #0]
 8004736:	6825      	ldr	r5, [r4, #0]
 8004738:	f015 0506 	ands.w	r5, r5, #6
 800473c:	d106      	bne.n	800474c <_printf_common+0x48>
 800473e:	f104 0a19 	add.w	sl, r4, #25
 8004742:	68e3      	ldr	r3, [r4, #12]
 8004744:	6832      	ldr	r2, [r6, #0]
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	42ab      	cmp	r3, r5
 800474a:	dc26      	bgt.n	800479a <_printf_common+0x96>
 800474c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004750:	1e13      	subs	r3, r2, #0
 8004752:	6822      	ldr	r2, [r4, #0]
 8004754:	bf18      	it	ne
 8004756:	2301      	movne	r3, #1
 8004758:	0692      	lsls	r2, r2, #26
 800475a:	d42b      	bmi.n	80047b4 <_printf_common+0xb0>
 800475c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004760:	4649      	mov	r1, r9
 8004762:	4638      	mov	r0, r7
 8004764:	47c0      	blx	r8
 8004766:	3001      	adds	r0, #1
 8004768:	d01e      	beq.n	80047a8 <_printf_common+0xa4>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	68e5      	ldr	r5, [r4, #12]
 800476e:	6832      	ldr	r2, [r6, #0]
 8004770:	f003 0306 	and.w	r3, r3, #6
 8004774:	2b04      	cmp	r3, #4
 8004776:	bf08      	it	eq
 8004778:	1aad      	subeq	r5, r5, r2
 800477a:	68a3      	ldr	r3, [r4, #8]
 800477c:	6922      	ldr	r2, [r4, #16]
 800477e:	bf0c      	ite	eq
 8004780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004784:	2500      	movne	r5, #0
 8004786:	4293      	cmp	r3, r2
 8004788:	bfc4      	itt	gt
 800478a:	1a9b      	subgt	r3, r3, r2
 800478c:	18ed      	addgt	r5, r5, r3
 800478e:	2600      	movs	r6, #0
 8004790:	341a      	adds	r4, #26
 8004792:	42b5      	cmp	r5, r6
 8004794:	d11a      	bne.n	80047cc <_printf_common+0xc8>
 8004796:	2000      	movs	r0, #0
 8004798:	e008      	b.n	80047ac <_printf_common+0xa8>
 800479a:	2301      	movs	r3, #1
 800479c:	4652      	mov	r2, sl
 800479e:	4649      	mov	r1, r9
 80047a0:	4638      	mov	r0, r7
 80047a2:	47c0      	blx	r8
 80047a4:	3001      	adds	r0, #1
 80047a6:	d103      	bne.n	80047b0 <_printf_common+0xac>
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b0:	3501      	adds	r5, #1
 80047b2:	e7c6      	b.n	8004742 <_printf_common+0x3e>
 80047b4:	18e1      	adds	r1, r4, r3
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	2030      	movs	r0, #48	; 0x30
 80047ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047be:	4422      	add	r2, r4
 80047c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047c8:	3302      	adds	r3, #2
 80047ca:	e7c7      	b.n	800475c <_printf_common+0x58>
 80047cc:	2301      	movs	r3, #1
 80047ce:	4622      	mov	r2, r4
 80047d0:	4649      	mov	r1, r9
 80047d2:	4638      	mov	r0, r7
 80047d4:	47c0      	blx	r8
 80047d6:	3001      	adds	r0, #1
 80047d8:	d0e6      	beq.n	80047a8 <_printf_common+0xa4>
 80047da:	3601      	adds	r6, #1
 80047dc:	e7d9      	b.n	8004792 <_printf_common+0x8e>
	...

080047e0 <_printf_i>:
 80047e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047e4:	7e0f      	ldrb	r7, [r1, #24]
 80047e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047e8:	2f78      	cmp	r7, #120	; 0x78
 80047ea:	4691      	mov	r9, r2
 80047ec:	4680      	mov	r8, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	469a      	mov	sl, r3
 80047f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047f6:	d807      	bhi.n	8004808 <_printf_i+0x28>
 80047f8:	2f62      	cmp	r7, #98	; 0x62
 80047fa:	d80a      	bhi.n	8004812 <_printf_i+0x32>
 80047fc:	2f00      	cmp	r7, #0
 80047fe:	f000 80d8 	beq.w	80049b2 <_printf_i+0x1d2>
 8004802:	2f58      	cmp	r7, #88	; 0x58
 8004804:	f000 80a3 	beq.w	800494e <_printf_i+0x16e>
 8004808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800480c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004810:	e03a      	b.n	8004888 <_printf_i+0xa8>
 8004812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004816:	2b15      	cmp	r3, #21
 8004818:	d8f6      	bhi.n	8004808 <_printf_i+0x28>
 800481a:	a101      	add	r1, pc, #4	; (adr r1, 8004820 <_printf_i+0x40>)
 800481c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004820:	08004879 	.word	0x08004879
 8004824:	0800488d 	.word	0x0800488d
 8004828:	08004809 	.word	0x08004809
 800482c:	08004809 	.word	0x08004809
 8004830:	08004809 	.word	0x08004809
 8004834:	08004809 	.word	0x08004809
 8004838:	0800488d 	.word	0x0800488d
 800483c:	08004809 	.word	0x08004809
 8004840:	08004809 	.word	0x08004809
 8004844:	08004809 	.word	0x08004809
 8004848:	08004809 	.word	0x08004809
 800484c:	08004999 	.word	0x08004999
 8004850:	080048bd 	.word	0x080048bd
 8004854:	0800497b 	.word	0x0800497b
 8004858:	08004809 	.word	0x08004809
 800485c:	08004809 	.word	0x08004809
 8004860:	080049bb 	.word	0x080049bb
 8004864:	08004809 	.word	0x08004809
 8004868:	080048bd 	.word	0x080048bd
 800486c:	08004809 	.word	0x08004809
 8004870:	08004809 	.word	0x08004809
 8004874:	08004983 	.word	0x08004983
 8004878:	682b      	ldr	r3, [r5, #0]
 800487a:	1d1a      	adds	r2, r3, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	602a      	str	r2, [r5, #0]
 8004880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004888:	2301      	movs	r3, #1
 800488a:	e0a3      	b.n	80049d4 <_printf_i+0x1f4>
 800488c:	6820      	ldr	r0, [r4, #0]
 800488e:	6829      	ldr	r1, [r5, #0]
 8004890:	0606      	lsls	r6, r0, #24
 8004892:	f101 0304 	add.w	r3, r1, #4
 8004896:	d50a      	bpl.n	80048ae <_printf_i+0xce>
 8004898:	680e      	ldr	r6, [r1, #0]
 800489a:	602b      	str	r3, [r5, #0]
 800489c:	2e00      	cmp	r6, #0
 800489e:	da03      	bge.n	80048a8 <_printf_i+0xc8>
 80048a0:	232d      	movs	r3, #45	; 0x2d
 80048a2:	4276      	negs	r6, r6
 80048a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048a8:	485e      	ldr	r0, [pc, #376]	; (8004a24 <_printf_i+0x244>)
 80048aa:	230a      	movs	r3, #10
 80048ac:	e019      	b.n	80048e2 <_printf_i+0x102>
 80048ae:	680e      	ldr	r6, [r1, #0]
 80048b0:	602b      	str	r3, [r5, #0]
 80048b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048b6:	bf18      	it	ne
 80048b8:	b236      	sxthne	r6, r6
 80048ba:	e7ef      	b.n	800489c <_printf_i+0xbc>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	1d19      	adds	r1, r3, #4
 80048c2:	6029      	str	r1, [r5, #0]
 80048c4:	0601      	lsls	r1, r0, #24
 80048c6:	d501      	bpl.n	80048cc <_printf_i+0xec>
 80048c8:	681e      	ldr	r6, [r3, #0]
 80048ca:	e002      	b.n	80048d2 <_printf_i+0xf2>
 80048cc:	0646      	lsls	r6, r0, #25
 80048ce:	d5fb      	bpl.n	80048c8 <_printf_i+0xe8>
 80048d0:	881e      	ldrh	r6, [r3, #0]
 80048d2:	4854      	ldr	r0, [pc, #336]	; (8004a24 <_printf_i+0x244>)
 80048d4:	2f6f      	cmp	r7, #111	; 0x6f
 80048d6:	bf0c      	ite	eq
 80048d8:	2308      	moveq	r3, #8
 80048da:	230a      	movne	r3, #10
 80048dc:	2100      	movs	r1, #0
 80048de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048e2:	6865      	ldr	r5, [r4, #4]
 80048e4:	60a5      	str	r5, [r4, #8]
 80048e6:	2d00      	cmp	r5, #0
 80048e8:	bfa2      	ittt	ge
 80048ea:	6821      	ldrge	r1, [r4, #0]
 80048ec:	f021 0104 	bicge.w	r1, r1, #4
 80048f0:	6021      	strge	r1, [r4, #0]
 80048f2:	b90e      	cbnz	r6, 80048f8 <_printf_i+0x118>
 80048f4:	2d00      	cmp	r5, #0
 80048f6:	d04d      	beq.n	8004994 <_printf_i+0x1b4>
 80048f8:	4615      	mov	r5, r2
 80048fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80048fe:	fb03 6711 	mls	r7, r3, r1, r6
 8004902:	5dc7      	ldrb	r7, [r0, r7]
 8004904:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004908:	4637      	mov	r7, r6
 800490a:	42bb      	cmp	r3, r7
 800490c:	460e      	mov	r6, r1
 800490e:	d9f4      	bls.n	80048fa <_printf_i+0x11a>
 8004910:	2b08      	cmp	r3, #8
 8004912:	d10b      	bne.n	800492c <_printf_i+0x14c>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	07de      	lsls	r6, r3, #31
 8004918:	d508      	bpl.n	800492c <_printf_i+0x14c>
 800491a:	6923      	ldr	r3, [r4, #16]
 800491c:	6861      	ldr	r1, [r4, #4]
 800491e:	4299      	cmp	r1, r3
 8004920:	bfde      	ittt	le
 8004922:	2330      	movle	r3, #48	; 0x30
 8004924:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004928:	f105 35ff 	addle.w	r5, r5, #4294967295
 800492c:	1b52      	subs	r2, r2, r5
 800492e:	6122      	str	r2, [r4, #16]
 8004930:	f8cd a000 	str.w	sl, [sp]
 8004934:	464b      	mov	r3, r9
 8004936:	aa03      	add	r2, sp, #12
 8004938:	4621      	mov	r1, r4
 800493a:	4640      	mov	r0, r8
 800493c:	f7ff fee2 	bl	8004704 <_printf_common>
 8004940:	3001      	adds	r0, #1
 8004942:	d14c      	bne.n	80049de <_printf_i+0x1fe>
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	b004      	add	sp, #16
 800494a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494e:	4835      	ldr	r0, [pc, #212]	; (8004a24 <_printf_i+0x244>)
 8004950:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004954:	6829      	ldr	r1, [r5, #0]
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	f851 6b04 	ldr.w	r6, [r1], #4
 800495c:	6029      	str	r1, [r5, #0]
 800495e:	061d      	lsls	r5, r3, #24
 8004960:	d514      	bpl.n	800498c <_printf_i+0x1ac>
 8004962:	07df      	lsls	r7, r3, #31
 8004964:	bf44      	itt	mi
 8004966:	f043 0320 	orrmi.w	r3, r3, #32
 800496a:	6023      	strmi	r3, [r4, #0]
 800496c:	b91e      	cbnz	r6, 8004976 <_printf_i+0x196>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	f023 0320 	bic.w	r3, r3, #32
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	2310      	movs	r3, #16
 8004978:	e7b0      	b.n	80048dc <_printf_i+0xfc>
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	f043 0320 	orr.w	r3, r3, #32
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	2378      	movs	r3, #120	; 0x78
 8004984:	4828      	ldr	r0, [pc, #160]	; (8004a28 <_printf_i+0x248>)
 8004986:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800498a:	e7e3      	b.n	8004954 <_printf_i+0x174>
 800498c:	0659      	lsls	r1, r3, #25
 800498e:	bf48      	it	mi
 8004990:	b2b6      	uxthmi	r6, r6
 8004992:	e7e6      	b.n	8004962 <_printf_i+0x182>
 8004994:	4615      	mov	r5, r2
 8004996:	e7bb      	b.n	8004910 <_printf_i+0x130>
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	6826      	ldr	r6, [r4, #0]
 800499c:	6961      	ldr	r1, [r4, #20]
 800499e:	1d18      	adds	r0, r3, #4
 80049a0:	6028      	str	r0, [r5, #0]
 80049a2:	0635      	lsls	r5, r6, #24
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	d501      	bpl.n	80049ac <_printf_i+0x1cc>
 80049a8:	6019      	str	r1, [r3, #0]
 80049aa:	e002      	b.n	80049b2 <_printf_i+0x1d2>
 80049ac:	0670      	lsls	r0, r6, #25
 80049ae:	d5fb      	bpl.n	80049a8 <_printf_i+0x1c8>
 80049b0:	8019      	strh	r1, [r3, #0]
 80049b2:	2300      	movs	r3, #0
 80049b4:	6123      	str	r3, [r4, #16]
 80049b6:	4615      	mov	r5, r2
 80049b8:	e7ba      	b.n	8004930 <_printf_i+0x150>
 80049ba:	682b      	ldr	r3, [r5, #0]
 80049bc:	1d1a      	adds	r2, r3, #4
 80049be:	602a      	str	r2, [r5, #0]
 80049c0:	681d      	ldr	r5, [r3, #0]
 80049c2:	6862      	ldr	r2, [r4, #4]
 80049c4:	2100      	movs	r1, #0
 80049c6:	4628      	mov	r0, r5
 80049c8:	f7fb fc0a 	bl	80001e0 <memchr>
 80049cc:	b108      	cbz	r0, 80049d2 <_printf_i+0x1f2>
 80049ce:	1b40      	subs	r0, r0, r5
 80049d0:	6060      	str	r0, [r4, #4]
 80049d2:	6863      	ldr	r3, [r4, #4]
 80049d4:	6123      	str	r3, [r4, #16]
 80049d6:	2300      	movs	r3, #0
 80049d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049dc:	e7a8      	b.n	8004930 <_printf_i+0x150>
 80049de:	6923      	ldr	r3, [r4, #16]
 80049e0:	462a      	mov	r2, r5
 80049e2:	4649      	mov	r1, r9
 80049e4:	4640      	mov	r0, r8
 80049e6:	47d0      	blx	sl
 80049e8:	3001      	adds	r0, #1
 80049ea:	d0ab      	beq.n	8004944 <_printf_i+0x164>
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	079b      	lsls	r3, r3, #30
 80049f0:	d413      	bmi.n	8004a1a <_printf_i+0x23a>
 80049f2:	68e0      	ldr	r0, [r4, #12]
 80049f4:	9b03      	ldr	r3, [sp, #12]
 80049f6:	4298      	cmp	r0, r3
 80049f8:	bfb8      	it	lt
 80049fa:	4618      	movlt	r0, r3
 80049fc:	e7a4      	b.n	8004948 <_printf_i+0x168>
 80049fe:	2301      	movs	r3, #1
 8004a00:	4632      	mov	r2, r6
 8004a02:	4649      	mov	r1, r9
 8004a04:	4640      	mov	r0, r8
 8004a06:	47d0      	blx	sl
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d09b      	beq.n	8004944 <_printf_i+0x164>
 8004a0c:	3501      	adds	r5, #1
 8004a0e:	68e3      	ldr	r3, [r4, #12]
 8004a10:	9903      	ldr	r1, [sp, #12]
 8004a12:	1a5b      	subs	r3, r3, r1
 8004a14:	42ab      	cmp	r3, r5
 8004a16:	dcf2      	bgt.n	80049fe <_printf_i+0x21e>
 8004a18:	e7eb      	b.n	80049f2 <_printf_i+0x212>
 8004a1a:	2500      	movs	r5, #0
 8004a1c:	f104 0619 	add.w	r6, r4, #25
 8004a20:	e7f5      	b.n	8004a0e <_printf_i+0x22e>
 8004a22:	bf00      	nop
 8004a24:	08005b6d 	.word	0x08005b6d
 8004a28:	08005b7e 	.word	0x08005b7e

08004a2c <memcpy>:
 8004a2c:	440a      	add	r2, r1
 8004a2e:	4291      	cmp	r1, r2
 8004a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a34:	d100      	bne.n	8004a38 <memcpy+0xc>
 8004a36:	4770      	bx	lr
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a42:	4291      	cmp	r1, r2
 8004a44:	d1f9      	bne.n	8004a3a <memcpy+0xe>
 8004a46:	bd10      	pop	{r4, pc}

08004a48 <memmove>:
 8004a48:	4288      	cmp	r0, r1
 8004a4a:	b510      	push	{r4, lr}
 8004a4c:	eb01 0402 	add.w	r4, r1, r2
 8004a50:	d902      	bls.n	8004a58 <memmove+0x10>
 8004a52:	4284      	cmp	r4, r0
 8004a54:	4623      	mov	r3, r4
 8004a56:	d807      	bhi.n	8004a68 <memmove+0x20>
 8004a58:	1e43      	subs	r3, r0, #1
 8004a5a:	42a1      	cmp	r1, r4
 8004a5c:	d008      	beq.n	8004a70 <memmove+0x28>
 8004a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a66:	e7f8      	b.n	8004a5a <memmove+0x12>
 8004a68:	4402      	add	r2, r0
 8004a6a:	4601      	mov	r1, r0
 8004a6c:	428a      	cmp	r2, r1
 8004a6e:	d100      	bne.n	8004a72 <memmove+0x2a>
 8004a70:	bd10      	pop	{r4, pc}
 8004a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a7a:	e7f7      	b.n	8004a6c <memmove+0x24>

08004a7c <_free_r>:
 8004a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a7e:	2900      	cmp	r1, #0
 8004a80:	d044      	beq.n	8004b0c <_free_r+0x90>
 8004a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a86:	9001      	str	r0, [sp, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f1a1 0404 	sub.w	r4, r1, #4
 8004a8e:	bfb8      	it	lt
 8004a90:	18e4      	addlt	r4, r4, r3
 8004a92:	f000 f913 	bl	8004cbc <__malloc_lock>
 8004a96:	4a1e      	ldr	r2, [pc, #120]	; (8004b10 <_free_r+0x94>)
 8004a98:	9801      	ldr	r0, [sp, #4]
 8004a9a:	6813      	ldr	r3, [r2, #0]
 8004a9c:	b933      	cbnz	r3, 8004aac <_free_r+0x30>
 8004a9e:	6063      	str	r3, [r4, #4]
 8004aa0:	6014      	str	r4, [r2, #0]
 8004aa2:	b003      	add	sp, #12
 8004aa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004aa8:	f000 b90e 	b.w	8004cc8 <__malloc_unlock>
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	d908      	bls.n	8004ac2 <_free_r+0x46>
 8004ab0:	6825      	ldr	r5, [r4, #0]
 8004ab2:	1961      	adds	r1, r4, r5
 8004ab4:	428b      	cmp	r3, r1
 8004ab6:	bf01      	itttt	eq
 8004ab8:	6819      	ldreq	r1, [r3, #0]
 8004aba:	685b      	ldreq	r3, [r3, #4]
 8004abc:	1949      	addeq	r1, r1, r5
 8004abe:	6021      	streq	r1, [r4, #0]
 8004ac0:	e7ed      	b.n	8004a9e <_free_r+0x22>
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	b10b      	cbz	r3, 8004acc <_free_r+0x50>
 8004ac8:	42a3      	cmp	r3, r4
 8004aca:	d9fa      	bls.n	8004ac2 <_free_r+0x46>
 8004acc:	6811      	ldr	r1, [r2, #0]
 8004ace:	1855      	adds	r5, r2, r1
 8004ad0:	42a5      	cmp	r5, r4
 8004ad2:	d10b      	bne.n	8004aec <_free_r+0x70>
 8004ad4:	6824      	ldr	r4, [r4, #0]
 8004ad6:	4421      	add	r1, r4
 8004ad8:	1854      	adds	r4, r2, r1
 8004ada:	42a3      	cmp	r3, r4
 8004adc:	6011      	str	r1, [r2, #0]
 8004ade:	d1e0      	bne.n	8004aa2 <_free_r+0x26>
 8004ae0:	681c      	ldr	r4, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	6053      	str	r3, [r2, #4]
 8004ae6:	4421      	add	r1, r4
 8004ae8:	6011      	str	r1, [r2, #0]
 8004aea:	e7da      	b.n	8004aa2 <_free_r+0x26>
 8004aec:	d902      	bls.n	8004af4 <_free_r+0x78>
 8004aee:	230c      	movs	r3, #12
 8004af0:	6003      	str	r3, [r0, #0]
 8004af2:	e7d6      	b.n	8004aa2 <_free_r+0x26>
 8004af4:	6825      	ldr	r5, [r4, #0]
 8004af6:	1961      	adds	r1, r4, r5
 8004af8:	428b      	cmp	r3, r1
 8004afa:	bf04      	itt	eq
 8004afc:	6819      	ldreq	r1, [r3, #0]
 8004afe:	685b      	ldreq	r3, [r3, #4]
 8004b00:	6063      	str	r3, [r4, #4]
 8004b02:	bf04      	itt	eq
 8004b04:	1949      	addeq	r1, r1, r5
 8004b06:	6021      	streq	r1, [r4, #0]
 8004b08:	6054      	str	r4, [r2, #4]
 8004b0a:	e7ca      	b.n	8004aa2 <_free_r+0x26>
 8004b0c:	b003      	add	sp, #12
 8004b0e:	bd30      	pop	{r4, r5, pc}
 8004b10:	200001d0 	.word	0x200001d0

08004b14 <sbrk_aligned>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	4e0e      	ldr	r6, [pc, #56]	; (8004b50 <sbrk_aligned+0x3c>)
 8004b18:	460c      	mov	r4, r1
 8004b1a:	6831      	ldr	r1, [r6, #0]
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	b911      	cbnz	r1, 8004b26 <sbrk_aligned+0x12>
 8004b20:	f000 f8bc 	bl	8004c9c <_sbrk_r>
 8004b24:	6030      	str	r0, [r6, #0]
 8004b26:	4621      	mov	r1, r4
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f000 f8b7 	bl	8004c9c <_sbrk_r>
 8004b2e:	1c43      	adds	r3, r0, #1
 8004b30:	d00a      	beq.n	8004b48 <sbrk_aligned+0x34>
 8004b32:	1cc4      	adds	r4, r0, #3
 8004b34:	f024 0403 	bic.w	r4, r4, #3
 8004b38:	42a0      	cmp	r0, r4
 8004b3a:	d007      	beq.n	8004b4c <sbrk_aligned+0x38>
 8004b3c:	1a21      	subs	r1, r4, r0
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f000 f8ac 	bl	8004c9c <_sbrk_r>
 8004b44:	3001      	adds	r0, #1
 8004b46:	d101      	bne.n	8004b4c <sbrk_aligned+0x38>
 8004b48:	f04f 34ff 	mov.w	r4, #4294967295
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	200001d4 	.word	0x200001d4

08004b54 <_malloc_r>:
 8004b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b58:	1ccd      	adds	r5, r1, #3
 8004b5a:	f025 0503 	bic.w	r5, r5, #3
 8004b5e:	3508      	adds	r5, #8
 8004b60:	2d0c      	cmp	r5, #12
 8004b62:	bf38      	it	cc
 8004b64:	250c      	movcc	r5, #12
 8004b66:	2d00      	cmp	r5, #0
 8004b68:	4607      	mov	r7, r0
 8004b6a:	db01      	blt.n	8004b70 <_malloc_r+0x1c>
 8004b6c:	42a9      	cmp	r1, r5
 8004b6e:	d905      	bls.n	8004b7c <_malloc_r+0x28>
 8004b70:	230c      	movs	r3, #12
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	2600      	movs	r6, #0
 8004b76:	4630      	mov	r0, r6
 8004b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b7c:	4e2e      	ldr	r6, [pc, #184]	; (8004c38 <_malloc_r+0xe4>)
 8004b7e:	f000 f89d 	bl	8004cbc <__malloc_lock>
 8004b82:	6833      	ldr	r3, [r6, #0]
 8004b84:	461c      	mov	r4, r3
 8004b86:	bb34      	cbnz	r4, 8004bd6 <_malloc_r+0x82>
 8004b88:	4629      	mov	r1, r5
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	f7ff ffc2 	bl	8004b14 <sbrk_aligned>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	4604      	mov	r4, r0
 8004b94:	d14d      	bne.n	8004c32 <_malloc_r+0xde>
 8004b96:	6834      	ldr	r4, [r6, #0]
 8004b98:	4626      	mov	r6, r4
 8004b9a:	2e00      	cmp	r6, #0
 8004b9c:	d140      	bne.n	8004c20 <_malloc_r+0xcc>
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	4631      	mov	r1, r6
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	eb04 0803 	add.w	r8, r4, r3
 8004ba8:	f000 f878 	bl	8004c9c <_sbrk_r>
 8004bac:	4580      	cmp	r8, r0
 8004bae:	d13a      	bne.n	8004c26 <_malloc_r+0xd2>
 8004bb0:	6821      	ldr	r1, [r4, #0]
 8004bb2:	3503      	adds	r5, #3
 8004bb4:	1a6d      	subs	r5, r5, r1
 8004bb6:	f025 0503 	bic.w	r5, r5, #3
 8004bba:	3508      	adds	r5, #8
 8004bbc:	2d0c      	cmp	r5, #12
 8004bbe:	bf38      	it	cc
 8004bc0:	250c      	movcc	r5, #12
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	4638      	mov	r0, r7
 8004bc6:	f7ff ffa5 	bl	8004b14 <sbrk_aligned>
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d02b      	beq.n	8004c26 <_malloc_r+0xd2>
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	442b      	add	r3, r5
 8004bd2:	6023      	str	r3, [r4, #0]
 8004bd4:	e00e      	b.n	8004bf4 <_malloc_r+0xa0>
 8004bd6:	6822      	ldr	r2, [r4, #0]
 8004bd8:	1b52      	subs	r2, r2, r5
 8004bda:	d41e      	bmi.n	8004c1a <_malloc_r+0xc6>
 8004bdc:	2a0b      	cmp	r2, #11
 8004bde:	d916      	bls.n	8004c0e <_malloc_r+0xba>
 8004be0:	1961      	adds	r1, r4, r5
 8004be2:	42a3      	cmp	r3, r4
 8004be4:	6025      	str	r5, [r4, #0]
 8004be6:	bf18      	it	ne
 8004be8:	6059      	strne	r1, [r3, #4]
 8004bea:	6863      	ldr	r3, [r4, #4]
 8004bec:	bf08      	it	eq
 8004bee:	6031      	streq	r1, [r6, #0]
 8004bf0:	5162      	str	r2, [r4, r5]
 8004bf2:	604b      	str	r3, [r1, #4]
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	f104 060b 	add.w	r6, r4, #11
 8004bfa:	f000 f865 	bl	8004cc8 <__malloc_unlock>
 8004bfe:	f026 0607 	bic.w	r6, r6, #7
 8004c02:	1d23      	adds	r3, r4, #4
 8004c04:	1af2      	subs	r2, r6, r3
 8004c06:	d0b6      	beq.n	8004b76 <_malloc_r+0x22>
 8004c08:	1b9b      	subs	r3, r3, r6
 8004c0a:	50a3      	str	r3, [r4, r2]
 8004c0c:	e7b3      	b.n	8004b76 <_malloc_r+0x22>
 8004c0e:	6862      	ldr	r2, [r4, #4]
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	bf0c      	ite	eq
 8004c14:	6032      	streq	r2, [r6, #0]
 8004c16:	605a      	strne	r2, [r3, #4]
 8004c18:	e7ec      	b.n	8004bf4 <_malloc_r+0xa0>
 8004c1a:	4623      	mov	r3, r4
 8004c1c:	6864      	ldr	r4, [r4, #4]
 8004c1e:	e7b2      	b.n	8004b86 <_malloc_r+0x32>
 8004c20:	4634      	mov	r4, r6
 8004c22:	6876      	ldr	r6, [r6, #4]
 8004c24:	e7b9      	b.n	8004b9a <_malloc_r+0x46>
 8004c26:	230c      	movs	r3, #12
 8004c28:	603b      	str	r3, [r7, #0]
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	f000 f84c 	bl	8004cc8 <__malloc_unlock>
 8004c30:	e7a1      	b.n	8004b76 <_malloc_r+0x22>
 8004c32:	6025      	str	r5, [r4, #0]
 8004c34:	e7de      	b.n	8004bf4 <_malloc_r+0xa0>
 8004c36:	bf00      	nop
 8004c38:	200001d0 	.word	0x200001d0

08004c3c <_realloc_r>:
 8004c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c40:	4680      	mov	r8, r0
 8004c42:	4614      	mov	r4, r2
 8004c44:	460e      	mov	r6, r1
 8004c46:	b921      	cbnz	r1, 8004c52 <_realloc_r+0x16>
 8004c48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	f7ff bf81 	b.w	8004b54 <_malloc_r>
 8004c52:	b92a      	cbnz	r2, 8004c60 <_realloc_r+0x24>
 8004c54:	f7ff ff12 	bl	8004a7c <_free_r>
 8004c58:	4625      	mov	r5, r4
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c60:	f000 f838 	bl	8004cd4 <_malloc_usable_size_r>
 8004c64:	4284      	cmp	r4, r0
 8004c66:	4607      	mov	r7, r0
 8004c68:	d802      	bhi.n	8004c70 <_realloc_r+0x34>
 8004c6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c6e:	d812      	bhi.n	8004c96 <_realloc_r+0x5a>
 8004c70:	4621      	mov	r1, r4
 8004c72:	4640      	mov	r0, r8
 8004c74:	f7ff ff6e 	bl	8004b54 <_malloc_r>
 8004c78:	4605      	mov	r5, r0
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	d0ed      	beq.n	8004c5a <_realloc_r+0x1e>
 8004c7e:	42bc      	cmp	r4, r7
 8004c80:	4622      	mov	r2, r4
 8004c82:	4631      	mov	r1, r6
 8004c84:	bf28      	it	cs
 8004c86:	463a      	movcs	r2, r7
 8004c88:	f7ff fed0 	bl	8004a2c <memcpy>
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	4640      	mov	r0, r8
 8004c90:	f7ff fef4 	bl	8004a7c <_free_r>
 8004c94:	e7e1      	b.n	8004c5a <_realloc_r+0x1e>
 8004c96:	4635      	mov	r5, r6
 8004c98:	e7df      	b.n	8004c5a <_realloc_r+0x1e>
	...

08004c9c <_sbrk_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4d06      	ldr	r5, [pc, #24]	; (8004cb8 <_sbrk_r+0x1c>)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	602b      	str	r3, [r5, #0]
 8004ca8:	f7fc fed8 	bl	8001a5c <_sbrk>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_sbrk_r+0x1a>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_sbrk_r+0x1a>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	200001d8 	.word	0x200001d8

08004cbc <__malloc_lock>:
 8004cbc:	4801      	ldr	r0, [pc, #4]	; (8004cc4 <__malloc_lock+0x8>)
 8004cbe:	f000 b811 	b.w	8004ce4 <__retarget_lock_acquire_recursive>
 8004cc2:	bf00      	nop
 8004cc4:	200001dc 	.word	0x200001dc

08004cc8 <__malloc_unlock>:
 8004cc8:	4801      	ldr	r0, [pc, #4]	; (8004cd0 <__malloc_unlock+0x8>)
 8004cca:	f000 b80c 	b.w	8004ce6 <__retarget_lock_release_recursive>
 8004cce:	bf00      	nop
 8004cd0:	200001dc 	.word	0x200001dc

08004cd4 <_malloc_usable_size_r>:
 8004cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd8:	1f18      	subs	r0, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bfbc      	itt	lt
 8004cde:	580b      	ldrlt	r3, [r1, r0]
 8004ce0:	18c0      	addlt	r0, r0, r3
 8004ce2:	4770      	bx	lr

08004ce4 <__retarget_lock_acquire_recursive>:
 8004ce4:	4770      	bx	lr

08004ce6 <__retarget_lock_release_recursive>:
 8004ce6:	4770      	bx	lr

08004ce8 <pow>:
 8004ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cea:	ed2d 8b02 	vpush	{d8}
 8004cee:	eeb0 8a40 	vmov.f32	s16, s0
 8004cf2:	eef0 8a60 	vmov.f32	s17, s1
 8004cf6:	ec55 4b11 	vmov	r4, r5, d1
 8004cfa:	f000 f865 	bl	8004dc8 <__ieee754_pow>
 8004cfe:	4622      	mov	r2, r4
 8004d00:	462b      	mov	r3, r5
 8004d02:	4620      	mov	r0, r4
 8004d04:	4629      	mov	r1, r5
 8004d06:	ec57 6b10 	vmov	r6, r7, d0
 8004d0a:	f7fb ff0f 	bl	8000b2c <__aeabi_dcmpun>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d13b      	bne.n	8004d8a <pow+0xa2>
 8004d12:	ec51 0b18 	vmov	r0, r1, d8
 8004d16:	2200      	movs	r2, #0
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f7fb fed5 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d1e:	b1b8      	cbz	r0, 8004d50 <pow+0x68>
 8004d20:	2200      	movs	r2, #0
 8004d22:	2300      	movs	r3, #0
 8004d24:	4620      	mov	r0, r4
 8004d26:	4629      	mov	r1, r5
 8004d28:	f7fb fece 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d146      	bne.n	8004dbe <pow+0xd6>
 8004d30:	ec45 4b10 	vmov	d0, r4, r5
 8004d34:	f000 fe61 	bl	80059fa <finite>
 8004d38:	b338      	cbz	r0, 8004d8a <pow+0xa2>
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4620      	mov	r0, r4
 8004d40:	4629      	mov	r1, r5
 8004d42:	f7fb fecb 	bl	8000adc <__aeabi_dcmplt>
 8004d46:	b300      	cbz	r0, 8004d8a <pow+0xa2>
 8004d48:	f7ff fb2e 	bl	80043a8 <__errno>
 8004d4c:	2322      	movs	r3, #34	; 0x22
 8004d4e:	e01b      	b.n	8004d88 <pow+0xa0>
 8004d50:	ec47 6b10 	vmov	d0, r6, r7
 8004d54:	f000 fe51 	bl	80059fa <finite>
 8004d58:	b9e0      	cbnz	r0, 8004d94 <pow+0xac>
 8004d5a:	eeb0 0a48 	vmov.f32	s0, s16
 8004d5e:	eef0 0a68 	vmov.f32	s1, s17
 8004d62:	f000 fe4a 	bl	80059fa <finite>
 8004d66:	b1a8      	cbz	r0, 8004d94 <pow+0xac>
 8004d68:	ec45 4b10 	vmov	d0, r4, r5
 8004d6c:	f000 fe45 	bl	80059fa <finite>
 8004d70:	b180      	cbz	r0, 8004d94 <pow+0xac>
 8004d72:	4632      	mov	r2, r6
 8004d74:	463b      	mov	r3, r7
 8004d76:	4630      	mov	r0, r6
 8004d78:	4639      	mov	r1, r7
 8004d7a:	f7fb fed7 	bl	8000b2c <__aeabi_dcmpun>
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	d0e2      	beq.n	8004d48 <pow+0x60>
 8004d82:	f7ff fb11 	bl	80043a8 <__errno>
 8004d86:	2321      	movs	r3, #33	; 0x21
 8004d88:	6003      	str	r3, [r0, #0]
 8004d8a:	ecbd 8b02 	vpop	{d8}
 8004d8e:	ec47 6b10 	vmov	d0, r6, r7
 8004d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d94:	2200      	movs	r2, #0
 8004d96:	2300      	movs	r3, #0
 8004d98:	4630      	mov	r0, r6
 8004d9a:	4639      	mov	r1, r7
 8004d9c:	f7fb fe94 	bl	8000ac8 <__aeabi_dcmpeq>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	d0f2      	beq.n	8004d8a <pow+0xa2>
 8004da4:	eeb0 0a48 	vmov.f32	s0, s16
 8004da8:	eef0 0a68 	vmov.f32	s1, s17
 8004dac:	f000 fe25 	bl	80059fa <finite>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d0ea      	beq.n	8004d8a <pow+0xa2>
 8004db4:	ec45 4b10 	vmov	d0, r4, r5
 8004db8:	f000 fe1f 	bl	80059fa <finite>
 8004dbc:	e7c3      	b.n	8004d46 <pow+0x5e>
 8004dbe:	4f01      	ldr	r7, [pc, #4]	; (8004dc4 <pow+0xdc>)
 8004dc0:	2600      	movs	r6, #0
 8004dc2:	e7e2      	b.n	8004d8a <pow+0xa2>
 8004dc4:	3ff00000 	.word	0x3ff00000

08004dc8 <__ieee754_pow>:
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	ed2d 8b06 	vpush	{d8-d10}
 8004dd0:	b089      	sub	sp, #36	; 0x24
 8004dd2:	ed8d 1b00 	vstr	d1, [sp]
 8004dd6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004dda:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004dde:	ea58 0102 	orrs.w	r1, r8, r2
 8004de2:	ec57 6b10 	vmov	r6, r7, d0
 8004de6:	d115      	bne.n	8004e14 <__ieee754_pow+0x4c>
 8004de8:	19b3      	adds	r3, r6, r6
 8004dea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004dee:	4152      	adcs	r2, r2
 8004df0:	4299      	cmp	r1, r3
 8004df2:	4b89      	ldr	r3, [pc, #548]	; (8005018 <__ieee754_pow+0x250>)
 8004df4:	4193      	sbcs	r3, r2
 8004df6:	f080 84d2 	bcs.w	800579e <__ieee754_pow+0x9d6>
 8004dfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dfe:	4630      	mov	r0, r6
 8004e00:	4639      	mov	r1, r7
 8004e02:	f7fb fa43 	bl	800028c <__adddf3>
 8004e06:	ec41 0b10 	vmov	d0, r0, r1
 8004e0a:	b009      	add	sp, #36	; 0x24
 8004e0c:	ecbd 8b06 	vpop	{d8-d10}
 8004e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e14:	4b81      	ldr	r3, [pc, #516]	; (800501c <__ieee754_pow+0x254>)
 8004e16:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004e1a:	429c      	cmp	r4, r3
 8004e1c:	ee10 aa10 	vmov	sl, s0
 8004e20:	463d      	mov	r5, r7
 8004e22:	dc06      	bgt.n	8004e32 <__ieee754_pow+0x6a>
 8004e24:	d101      	bne.n	8004e2a <__ieee754_pow+0x62>
 8004e26:	2e00      	cmp	r6, #0
 8004e28:	d1e7      	bne.n	8004dfa <__ieee754_pow+0x32>
 8004e2a:	4598      	cmp	r8, r3
 8004e2c:	dc01      	bgt.n	8004e32 <__ieee754_pow+0x6a>
 8004e2e:	d10f      	bne.n	8004e50 <__ieee754_pow+0x88>
 8004e30:	b172      	cbz	r2, 8004e50 <__ieee754_pow+0x88>
 8004e32:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004e36:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004e3a:	ea55 050a 	orrs.w	r5, r5, sl
 8004e3e:	d1dc      	bne.n	8004dfa <__ieee754_pow+0x32>
 8004e40:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004e44:	18db      	adds	r3, r3, r3
 8004e46:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004e4a:	4152      	adcs	r2, r2
 8004e4c:	429d      	cmp	r5, r3
 8004e4e:	e7d0      	b.n	8004df2 <__ieee754_pow+0x2a>
 8004e50:	2d00      	cmp	r5, #0
 8004e52:	da3b      	bge.n	8004ecc <__ieee754_pow+0x104>
 8004e54:	4b72      	ldr	r3, [pc, #456]	; (8005020 <__ieee754_pow+0x258>)
 8004e56:	4598      	cmp	r8, r3
 8004e58:	dc51      	bgt.n	8004efe <__ieee754_pow+0x136>
 8004e5a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004e5e:	4598      	cmp	r8, r3
 8004e60:	f340 84ac 	ble.w	80057bc <__ieee754_pow+0x9f4>
 8004e64:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004e68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004e6c:	2b14      	cmp	r3, #20
 8004e6e:	dd0f      	ble.n	8004e90 <__ieee754_pow+0xc8>
 8004e70:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004e74:	fa22 f103 	lsr.w	r1, r2, r3
 8004e78:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	f040 849d 	bne.w	80057bc <__ieee754_pow+0x9f4>
 8004e82:	f001 0101 	and.w	r1, r1, #1
 8004e86:	f1c1 0302 	rsb	r3, r1, #2
 8004e8a:	9304      	str	r3, [sp, #16]
 8004e8c:	b182      	cbz	r2, 8004eb0 <__ieee754_pow+0xe8>
 8004e8e:	e05f      	b.n	8004f50 <__ieee754_pow+0x188>
 8004e90:	2a00      	cmp	r2, #0
 8004e92:	d15b      	bne.n	8004f4c <__ieee754_pow+0x184>
 8004e94:	f1c3 0314 	rsb	r3, r3, #20
 8004e98:	fa48 f103 	asr.w	r1, r8, r3
 8004e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea0:	4543      	cmp	r3, r8
 8004ea2:	f040 8488 	bne.w	80057b6 <__ieee754_pow+0x9ee>
 8004ea6:	f001 0101 	and.w	r1, r1, #1
 8004eaa:	f1c1 0302 	rsb	r3, r1, #2
 8004eae:	9304      	str	r3, [sp, #16]
 8004eb0:	4b5c      	ldr	r3, [pc, #368]	; (8005024 <__ieee754_pow+0x25c>)
 8004eb2:	4598      	cmp	r8, r3
 8004eb4:	d132      	bne.n	8004f1c <__ieee754_pow+0x154>
 8004eb6:	f1b9 0f00 	cmp.w	r9, #0
 8004eba:	f280 8478 	bge.w	80057ae <__ieee754_pow+0x9e6>
 8004ebe:	4959      	ldr	r1, [pc, #356]	; (8005024 <__ieee754_pow+0x25c>)
 8004ec0:	4632      	mov	r2, r6
 8004ec2:	463b      	mov	r3, r7
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f7fb fcc1 	bl	800084c <__aeabi_ddiv>
 8004eca:	e79c      	b.n	8004e06 <__ieee754_pow+0x3e>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	9304      	str	r3, [sp, #16]
 8004ed0:	2a00      	cmp	r2, #0
 8004ed2:	d13d      	bne.n	8004f50 <__ieee754_pow+0x188>
 8004ed4:	4b51      	ldr	r3, [pc, #324]	; (800501c <__ieee754_pow+0x254>)
 8004ed6:	4598      	cmp	r8, r3
 8004ed8:	d1ea      	bne.n	8004eb0 <__ieee754_pow+0xe8>
 8004eda:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004ede:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004ee2:	ea53 030a 	orrs.w	r3, r3, sl
 8004ee6:	f000 845a 	beq.w	800579e <__ieee754_pow+0x9d6>
 8004eea:	4b4f      	ldr	r3, [pc, #316]	; (8005028 <__ieee754_pow+0x260>)
 8004eec:	429c      	cmp	r4, r3
 8004eee:	dd08      	ble.n	8004f02 <__ieee754_pow+0x13a>
 8004ef0:	f1b9 0f00 	cmp.w	r9, #0
 8004ef4:	f2c0 8457 	blt.w	80057a6 <__ieee754_pow+0x9de>
 8004ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004efc:	e783      	b.n	8004e06 <__ieee754_pow+0x3e>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e7e5      	b.n	8004ece <__ieee754_pow+0x106>
 8004f02:	f1b9 0f00 	cmp.w	r9, #0
 8004f06:	f04f 0000 	mov.w	r0, #0
 8004f0a:	f04f 0100 	mov.w	r1, #0
 8004f0e:	f6bf af7a 	bge.w	8004e06 <__ieee754_pow+0x3e>
 8004f12:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004f16:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004f1a:	e774      	b.n	8004e06 <__ieee754_pow+0x3e>
 8004f1c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004f20:	d106      	bne.n	8004f30 <__ieee754_pow+0x168>
 8004f22:	4632      	mov	r2, r6
 8004f24:	463b      	mov	r3, r7
 8004f26:	4630      	mov	r0, r6
 8004f28:	4639      	mov	r1, r7
 8004f2a:	f7fb fb65 	bl	80005f8 <__aeabi_dmul>
 8004f2e:	e76a      	b.n	8004e06 <__ieee754_pow+0x3e>
 8004f30:	4b3e      	ldr	r3, [pc, #248]	; (800502c <__ieee754_pow+0x264>)
 8004f32:	4599      	cmp	r9, r3
 8004f34:	d10c      	bne.n	8004f50 <__ieee754_pow+0x188>
 8004f36:	2d00      	cmp	r5, #0
 8004f38:	db0a      	blt.n	8004f50 <__ieee754_pow+0x188>
 8004f3a:	ec47 6b10 	vmov	d0, r6, r7
 8004f3e:	b009      	add	sp, #36	; 0x24
 8004f40:	ecbd 8b06 	vpop	{d8-d10}
 8004f44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f48:	f000 bc6c 	b.w	8005824 <__ieee754_sqrt>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9304      	str	r3, [sp, #16]
 8004f50:	ec47 6b10 	vmov	d0, r6, r7
 8004f54:	f000 fd48 	bl	80059e8 <fabs>
 8004f58:	ec51 0b10 	vmov	r0, r1, d0
 8004f5c:	f1ba 0f00 	cmp.w	sl, #0
 8004f60:	d129      	bne.n	8004fb6 <__ieee754_pow+0x1ee>
 8004f62:	b124      	cbz	r4, 8004f6e <__ieee754_pow+0x1a6>
 8004f64:	4b2f      	ldr	r3, [pc, #188]	; (8005024 <__ieee754_pow+0x25c>)
 8004f66:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d123      	bne.n	8004fb6 <__ieee754_pow+0x1ee>
 8004f6e:	f1b9 0f00 	cmp.w	r9, #0
 8004f72:	da05      	bge.n	8004f80 <__ieee754_pow+0x1b8>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	2000      	movs	r0, #0
 8004f7a:	492a      	ldr	r1, [pc, #168]	; (8005024 <__ieee754_pow+0x25c>)
 8004f7c:	f7fb fc66 	bl	800084c <__aeabi_ddiv>
 8004f80:	2d00      	cmp	r5, #0
 8004f82:	f6bf af40 	bge.w	8004e06 <__ieee754_pow+0x3e>
 8004f86:	9b04      	ldr	r3, [sp, #16]
 8004f88:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004f8c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004f90:	4323      	orrs	r3, r4
 8004f92:	d108      	bne.n	8004fa6 <__ieee754_pow+0x1de>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	f7fb f974 	bl	8000288 <__aeabi_dsub>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	e78f      	b.n	8004ec6 <__ieee754_pow+0xfe>
 8004fa6:	9b04      	ldr	r3, [sp, #16]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	f47f af2c 	bne.w	8004e06 <__ieee754_pow+0x3e>
 8004fae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	e727      	b.n	8004e06 <__ieee754_pow+0x3e>
 8004fb6:	0feb      	lsrs	r3, r5, #31
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	9306      	str	r3, [sp, #24]
 8004fbc:	9a06      	ldr	r2, [sp, #24]
 8004fbe:	9b04      	ldr	r3, [sp, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	d102      	bne.n	8004fca <__ieee754_pow+0x202>
 8004fc4:	4632      	mov	r2, r6
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	e7e6      	b.n	8004f98 <__ieee754_pow+0x1d0>
 8004fca:	4b19      	ldr	r3, [pc, #100]	; (8005030 <__ieee754_pow+0x268>)
 8004fcc:	4598      	cmp	r8, r3
 8004fce:	f340 80fb 	ble.w	80051c8 <__ieee754_pow+0x400>
 8004fd2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004fd6:	4598      	cmp	r8, r3
 8004fd8:	4b13      	ldr	r3, [pc, #76]	; (8005028 <__ieee754_pow+0x260>)
 8004fda:	dd0c      	ble.n	8004ff6 <__ieee754_pow+0x22e>
 8004fdc:	429c      	cmp	r4, r3
 8004fde:	dc0f      	bgt.n	8005000 <__ieee754_pow+0x238>
 8004fe0:	f1b9 0f00 	cmp.w	r9, #0
 8004fe4:	da0f      	bge.n	8005006 <__ieee754_pow+0x23e>
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	b009      	add	sp, #36	; 0x24
 8004fea:	ecbd 8b06 	vpop	{d8-d10}
 8004fee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff2:	f000 bcf0 	b.w	80059d6 <__math_oflow>
 8004ff6:	429c      	cmp	r4, r3
 8004ff8:	dbf2      	blt.n	8004fe0 <__ieee754_pow+0x218>
 8004ffa:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <__ieee754_pow+0x25c>)
 8004ffc:	429c      	cmp	r4, r3
 8004ffe:	dd19      	ble.n	8005034 <__ieee754_pow+0x26c>
 8005000:	f1b9 0f00 	cmp.w	r9, #0
 8005004:	dcef      	bgt.n	8004fe6 <__ieee754_pow+0x21e>
 8005006:	2000      	movs	r0, #0
 8005008:	b009      	add	sp, #36	; 0x24
 800500a:	ecbd 8b06 	vpop	{d8-d10}
 800500e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005012:	f000 bcd7 	b.w	80059c4 <__math_uflow>
 8005016:	bf00      	nop
 8005018:	fff00000 	.word	0xfff00000
 800501c:	7ff00000 	.word	0x7ff00000
 8005020:	433fffff 	.word	0x433fffff
 8005024:	3ff00000 	.word	0x3ff00000
 8005028:	3fefffff 	.word	0x3fefffff
 800502c:	3fe00000 	.word	0x3fe00000
 8005030:	41e00000 	.word	0x41e00000
 8005034:	4b60      	ldr	r3, [pc, #384]	; (80051b8 <__ieee754_pow+0x3f0>)
 8005036:	2200      	movs	r2, #0
 8005038:	f7fb f926 	bl	8000288 <__aeabi_dsub>
 800503c:	a354      	add	r3, pc, #336	; (adr r3, 8005190 <__ieee754_pow+0x3c8>)
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	4604      	mov	r4, r0
 8005044:	460d      	mov	r5, r1
 8005046:	f7fb fad7 	bl	80005f8 <__aeabi_dmul>
 800504a:	a353      	add	r3, pc, #332	; (adr r3, 8005198 <__ieee754_pow+0x3d0>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	4606      	mov	r6, r0
 8005052:	460f      	mov	r7, r1
 8005054:	4620      	mov	r0, r4
 8005056:	4629      	mov	r1, r5
 8005058:	f7fb face 	bl	80005f8 <__aeabi_dmul>
 800505c:	4b57      	ldr	r3, [pc, #348]	; (80051bc <__ieee754_pow+0x3f4>)
 800505e:	4682      	mov	sl, r0
 8005060:	468b      	mov	fp, r1
 8005062:	2200      	movs	r2, #0
 8005064:	4620      	mov	r0, r4
 8005066:	4629      	mov	r1, r5
 8005068:	f7fb fac6 	bl	80005f8 <__aeabi_dmul>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	a14b      	add	r1, pc, #300	; (adr r1, 80051a0 <__ieee754_pow+0x3d8>)
 8005072:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005076:	f7fb f907 	bl	8000288 <__aeabi_dsub>
 800507a:	4622      	mov	r2, r4
 800507c:	462b      	mov	r3, r5
 800507e:	f7fb fabb 	bl	80005f8 <__aeabi_dmul>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	2000      	movs	r0, #0
 8005088:	494d      	ldr	r1, [pc, #308]	; (80051c0 <__ieee754_pow+0x3f8>)
 800508a:	f7fb f8fd 	bl	8000288 <__aeabi_dsub>
 800508e:	4622      	mov	r2, r4
 8005090:	4680      	mov	r8, r0
 8005092:	4689      	mov	r9, r1
 8005094:	462b      	mov	r3, r5
 8005096:	4620      	mov	r0, r4
 8005098:	4629      	mov	r1, r5
 800509a:	f7fb faad 	bl	80005f8 <__aeabi_dmul>
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	4640      	mov	r0, r8
 80050a4:	4649      	mov	r1, r9
 80050a6:	f7fb faa7 	bl	80005f8 <__aeabi_dmul>
 80050aa:	a33f      	add	r3, pc, #252	; (adr r3, 80051a8 <__ieee754_pow+0x3e0>)
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f7fb faa2 	bl	80005f8 <__aeabi_dmul>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4650      	mov	r0, sl
 80050ba:	4659      	mov	r1, fp
 80050bc:	f7fb f8e4 	bl	8000288 <__aeabi_dsub>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4680      	mov	r8, r0
 80050c6:	4689      	mov	r9, r1
 80050c8:	4630      	mov	r0, r6
 80050ca:	4639      	mov	r1, r7
 80050cc:	f7fb f8de 	bl	800028c <__adddf3>
 80050d0:	2000      	movs	r0, #0
 80050d2:	4632      	mov	r2, r6
 80050d4:	463b      	mov	r3, r7
 80050d6:	4604      	mov	r4, r0
 80050d8:	460d      	mov	r5, r1
 80050da:	f7fb f8d5 	bl	8000288 <__aeabi_dsub>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	4640      	mov	r0, r8
 80050e4:	4649      	mov	r1, r9
 80050e6:	f7fb f8cf 	bl	8000288 <__aeabi_dsub>
 80050ea:	9b04      	ldr	r3, [sp, #16]
 80050ec:	9a06      	ldr	r2, [sp, #24]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	4313      	orrs	r3, r2
 80050f2:	4682      	mov	sl, r0
 80050f4:	468b      	mov	fp, r1
 80050f6:	f040 81e7 	bne.w	80054c8 <__ieee754_pow+0x700>
 80050fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80051b0 <__ieee754_pow+0x3e8>
 80050fe:	eeb0 8a47 	vmov.f32	s16, s14
 8005102:	eef0 8a67 	vmov.f32	s17, s15
 8005106:	e9dd 6700 	ldrd	r6, r7, [sp]
 800510a:	2600      	movs	r6, #0
 800510c:	4632      	mov	r2, r6
 800510e:	463b      	mov	r3, r7
 8005110:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005114:	f7fb f8b8 	bl	8000288 <__aeabi_dsub>
 8005118:	4622      	mov	r2, r4
 800511a:	462b      	mov	r3, r5
 800511c:	f7fb fa6c 	bl	80005f8 <__aeabi_dmul>
 8005120:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005124:	4680      	mov	r8, r0
 8005126:	4689      	mov	r9, r1
 8005128:	4650      	mov	r0, sl
 800512a:	4659      	mov	r1, fp
 800512c:	f7fb fa64 	bl	80005f8 <__aeabi_dmul>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4640      	mov	r0, r8
 8005136:	4649      	mov	r1, r9
 8005138:	f7fb f8a8 	bl	800028c <__adddf3>
 800513c:	4632      	mov	r2, r6
 800513e:	463b      	mov	r3, r7
 8005140:	4680      	mov	r8, r0
 8005142:	4689      	mov	r9, r1
 8005144:	4620      	mov	r0, r4
 8005146:	4629      	mov	r1, r5
 8005148:	f7fb fa56 	bl	80005f8 <__aeabi_dmul>
 800514c:	460b      	mov	r3, r1
 800514e:	4604      	mov	r4, r0
 8005150:	460d      	mov	r5, r1
 8005152:	4602      	mov	r2, r0
 8005154:	4649      	mov	r1, r9
 8005156:	4640      	mov	r0, r8
 8005158:	f7fb f898 	bl	800028c <__adddf3>
 800515c:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <__ieee754_pow+0x3fc>)
 800515e:	4299      	cmp	r1, r3
 8005160:	ec45 4b19 	vmov	d9, r4, r5
 8005164:	4606      	mov	r6, r0
 8005166:	460f      	mov	r7, r1
 8005168:	468b      	mov	fp, r1
 800516a:	f340 82f1 	ble.w	8005750 <__ieee754_pow+0x988>
 800516e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005172:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005176:	4303      	orrs	r3, r0
 8005178:	f000 81e4 	beq.w	8005544 <__ieee754_pow+0x77c>
 800517c:	ec51 0b18 	vmov	r0, r1, d8
 8005180:	2200      	movs	r2, #0
 8005182:	2300      	movs	r3, #0
 8005184:	f7fb fcaa 	bl	8000adc <__aeabi_dcmplt>
 8005188:	3800      	subs	r0, #0
 800518a:	bf18      	it	ne
 800518c:	2001      	movne	r0, #1
 800518e:	e72b      	b.n	8004fe8 <__ieee754_pow+0x220>
 8005190:	60000000 	.word	0x60000000
 8005194:	3ff71547 	.word	0x3ff71547
 8005198:	f85ddf44 	.word	0xf85ddf44
 800519c:	3e54ae0b 	.word	0x3e54ae0b
 80051a0:	55555555 	.word	0x55555555
 80051a4:	3fd55555 	.word	0x3fd55555
 80051a8:	652b82fe 	.word	0x652b82fe
 80051ac:	3ff71547 	.word	0x3ff71547
 80051b0:	00000000 	.word	0x00000000
 80051b4:	bff00000 	.word	0xbff00000
 80051b8:	3ff00000 	.word	0x3ff00000
 80051bc:	3fd00000 	.word	0x3fd00000
 80051c0:	3fe00000 	.word	0x3fe00000
 80051c4:	408fffff 	.word	0x408fffff
 80051c8:	4bd5      	ldr	r3, [pc, #852]	; (8005520 <__ieee754_pow+0x758>)
 80051ca:	402b      	ands	r3, r5
 80051cc:	2200      	movs	r2, #0
 80051ce:	b92b      	cbnz	r3, 80051dc <__ieee754_pow+0x414>
 80051d0:	4bd4      	ldr	r3, [pc, #848]	; (8005524 <__ieee754_pow+0x75c>)
 80051d2:	f7fb fa11 	bl	80005f8 <__aeabi_dmul>
 80051d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80051da:	460c      	mov	r4, r1
 80051dc:	1523      	asrs	r3, r4, #20
 80051de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80051e2:	4413      	add	r3, r2
 80051e4:	9305      	str	r3, [sp, #20]
 80051e6:	4bd0      	ldr	r3, [pc, #832]	; (8005528 <__ieee754_pow+0x760>)
 80051e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80051ec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80051f0:	429c      	cmp	r4, r3
 80051f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80051f6:	dd08      	ble.n	800520a <__ieee754_pow+0x442>
 80051f8:	4bcc      	ldr	r3, [pc, #816]	; (800552c <__ieee754_pow+0x764>)
 80051fa:	429c      	cmp	r4, r3
 80051fc:	f340 8162 	ble.w	80054c4 <__ieee754_pow+0x6fc>
 8005200:	9b05      	ldr	r3, [sp, #20]
 8005202:	3301      	adds	r3, #1
 8005204:	9305      	str	r3, [sp, #20]
 8005206:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800520a:	2400      	movs	r4, #0
 800520c:	00e3      	lsls	r3, r4, #3
 800520e:	9307      	str	r3, [sp, #28]
 8005210:	4bc7      	ldr	r3, [pc, #796]	; (8005530 <__ieee754_pow+0x768>)
 8005212:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005216:	ed93 7b00 	vldr	d7, [r3]
 800521a:	4629      	mov	r1, r5
 800521c:	ec53 2b17 	vmov	r2, r3, d7
 8005220:	eeb0 9a47 	vmov.f32	s18, s14
 8005224:	eef0 9a67 	vmov.f32	s19, s15
 8005228:	4682      	mov	sl, r0
 800522a:	f7fb f82d 	bl	8000288 <__aeabi_dsub>
 800522e:	4652      	mov	r2, sl
 8005230:	4606      	mov	r6, r0
 8005232:	460f      	mov	r7, r1
 8005234:	462b      	mov	r3, r5
 8005236:	ec51 0b19 	vmov	r0, r1, d9
 800523a:	f7fb f827 	bl	800028c <__adddf3>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	2000      	movs	r0, #0
 8005244:	49bb      	ldr	r1, [pc, #748]	; (8005534 <__ieee754_pow+0x76c>)
 8005246:	f7fb fb01 	bl	800084c <__aeabi_ddiv>
 800524a:	ec41 0b1a 	vmov	d10, r0, r1
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4630      	mov	r0, r6
 8005254:	4639      	mov	r1, r7
 8005256:	f7fb f9cf 	bl	80005f8 <__aeabi_dmul>
 800525a:	2300      	movs	r3, #0
 800525c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005260:	9302      	str	r3, [sp, #8]
 8005262:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005266:	46ab      	mov	fp, r5
 8005268:	106d      	asrs	r5, r5, #1
 800526a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800526e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005272:	ec41 0b18 	vmov	d8, r0, r1
 8005276:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800527a:	2200      	movs	r2, #0
 800527c:	4640      	mov	r0, r8
 800527e:	4649      	mov	r1, r9
 8005280:	4614      	mov	r4, r2
 8005282:	461d      	mov	r5, r3
 8005284:	f7fb f9b8 	bl	80005f8 <__aeabi_dmul>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4630      	mov	r0, r6
 800528e:	4639      	mov	r1, r7
 8005290:	f7fa fffa 	bl	8000288 <__aeabi_dsub>
 8005294:	ec53 2b19 	vmov	r2, r3, d9
 8005298:	4606      	mov	r6, r0
 800529a:	460f      	mov	r7, r1
 800529c:	4620      	mov	r0, r4
 800529e:	4629      	mov	r1, r5
 80052a0:	f7fa fff2 	bl	8000288 <__aeabi_dsub>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4650      	mov	r0, sl
 80052aa:	4659      	mov	r1, fp
 80052ac:	f7fa ffec 	bl	8000288 <__aeabi_dsub>
 80052b0:	4642      	mov	r2, r8
 80052b2:	464b      	mov	r3, r9
 80052b4:	f7fb f9a0 	bl	80005f8 <__aeabi_dmul>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4630      	mov	r0, r6
 80052be:	4639      	mov	r1, r7
 80052c0:	f7fa ffe2 	bl	8000288 <__aeabi_dsub>
 80052c4:	ec53 2b1a 	vmov	r2, r3, d10
 80052c8:	f7fb f996 	bl	80005f8 <__aeabi_dmul>
 80052cc:	ec53 2b18 	vmov	r2, r3, d8
 80052d0:	ec41 0b19 	vmov	d9, r0, r1
 80052d4:	ec51 0b18 	vmov	r0, r1, d8
 80052d8:	f7fb f98e 	bl	80005f8 <__aeabi_dmul>
 80052dc:	a37c      	add	r3, pc, #496	; (adr r3, 80054d0 <__ieee754_pow+0x708>)
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	4604      	mov	r4, r0
 80052e4:	460d      	mov	r5, r1
 80052e6:	f7fb f987 	bl	80005f8 <__aeabi_dmul>
 80052ea:	a37b      	add	r3, pc, #492	; (adr r3, 80054d8 <__ieee754_pow+0x710>)
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f7fa ffcc 	bl	800028c <__adddf3>
 80052f4:	4622      	mov	r2, r4
 80052f6:	462b      	mov	r3, r5
 80052f8:	f7fb f97e 	bl	80005f8 <__aeabi_dmul>
 80052fc:	a378      	add	r3, pc, #480	; (adr r3, 80054e0 <__ieee754_pow+0x718>)
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	f7fa ffc3 	bl	800028c <__adddf3>
 8005306:	4622      	mov	r2, r4
 8005308:	462b      	mov	r3, r5
 800530a:	f7fb f975 	bl	80005f8 <__aeabi_dmul>
 800530e:	a376      	add	r3, pc, #472	; (adr r3, 80054e8 <__ieee754_pow+0x720>)
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	f7fa ffba 	bl	800028c <__adddf3>
 8005318:	4622      	mov	r2, r4
 800531a:	462b      	mov	r3, r5
 800531c:	f7fb f96c 	bl	80005f8 <__aeabi_dmul>
 8005320:	a373      	add	r3, pc, #460	; (adr r3, 80054f0 <__ieee754_pow+0x728>)
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	f7fa ffb1 	bl	800028c <__adddf3>
 800532a:	4622      	mov	r2, r4
 800532c:	462b      	mov	r3, r5
 800532e:	f7fb f963 	bl	80005f8 <__aeabi_dmul>
 8005332:	a371      	add	r3, pc, #452	; (adr r3, 80054f8 <__ieee754_pow+0x730>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f7fa ffa8 	bl	800028c <__adddf3>
 800533c:	4622      	mov	r2, r4
 800533e:	4606      	mov	r6, r0
 8005340:	460f      	mov	r7, r1
 8005342:	462b      	mov	r3, r5
 8005344:	4620      	mov	r0, r4
 8005346:	4629      	mov	r1, r5
 8005348:	f7fb f956 	bl	80005f8 <__aeabi_dmul>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4630      	mov	r0, r6
 8005352:	4639      	mov	r1, r7
 8005354:	f7fb f950 	bl	80005f8 <__aeabi_dmul>
 8005358:	4642      	mov	r2, r8
 800535a:	4604      	mov	r4, r0
 800535c:	460d      	mov	r5, r1
 800535e:	464b      	mov	r3, r9
 8005360:	ec51 0b18 	vmov	r0, r1, d8
 8005364:	f7fa ff92 	bl	800028c <__adddf3>
 8005368:	ec53 2b19 	vmov	r2, r3, d9
 800536c:	f7fb f944 	bl	80005f8 <__aeabi_dmul>
 8005370:	4622      	mov	r2, r4
 8005372:	462b      	mov	r3, r5
 8005374:	f7fa ff8a 	bl	800028c <__adddf3>
 8005378:	4642      	mov	r2, r8
 800537a:	4682      	mov	sl, r0
 800537c:	468b      	mov	fp, r1
 800537e:	464b      	mov	r3, r9
 8005380:	4640      	mov	r0, r8
 8005382:	4649      	mov	r1, r9
 8005384:	f7fb f938 	bl	80005f8 <__aeabi_dmul>
 8005388:	4b6b      	ldr	r3, [pc, #428]	; (8005538 <__ieee754_pow+0x770>)
 800538a:	2200      	movs	r2, #0
 800538c:	4606      	mov	r6, r0
 800538e:	460f      	mov	r7, r1
 8005390:	f7fa ff7c 	bl	800028c <__adddf3>
 8005394:	4652      	mov	r2, sl
 8005396:	465b      	mov	r3, fp
 8005398:	f7fa ff78 	bl	800028c <__adddf3>
 800539c:	2000      	movs	r0, #0
 800539e:	4604      	mov	r4, r0
 80053a0:	460d      	mov	r5, r1
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4640      	mov	r0, r8
 80053a8:	4649      	mov	r1, r9
 80053aa:	f7fb f925 	bl	80005f8 <__aeabi_dmul>
 80053ae:	4b62      	ldr	r3, [pc, #392]	; (8005538 <__ieee754_pow+0x770>)
 80053b0:	4680      	mov	r8, r0
 80053b2:	4689      	mov	r9, r1
 80053b4:	2200      	movs	r2, #0
 80053b6:	4620      	mov	r0, r4
 80053b8:	4629      	mov	r1, r5
 80053ba:	f7fa ff65 	bl	8000288 <__aeabi_dsub>
 80053be:	4632      	mov	r2, r6
 80053c0:	463b      	mov	r3, r7
 80053c2:	f7fa ff61 	bl	8000288 <__aeabi_dsub>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4650      	mov	r0, sl
 80053cc:	4659      	mov	r1, fp
 80053ce:	f7fa ff5b 	bl	8000288 <__aeabi_dsub>
 80053d2:	ec53 2b18 	vmov	r2, r3, d8
 80053d6:	f7fb f90f 	bl	80005f8 <__aeabi_dmul>
 80053da:	4622      	mov	r2, r4
 80053dc:	4606      	mov	r6, r0
 80053de:	460f      	mov	r7, r1
 80053e0:	462b      	mov	r3, r5
 80053e2:	ec51 0b19 	vmov	r0, r1, d9
 80053e6:	f7fb f907 	bl	80005f8 <__aeabi_dmul>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4630      	mov	r0, r6
 80053f0:	4639      	mov	r1, r7
 80053f2:	f7fa ff4b 	bl	800028c <__adddf3>
 80053f6:	4606      	mov	r6, r0
 80053f8:	460f      	mov	r7, r1
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4640      	mov	r0, r8
 8005400:	4649      	mov	r1, r9
 8005402:	f7fa ff43 	bl	800028c <__adddf3>
 8005406:	a33e      	add	r3, pc, #248	; (adr r3, 8005500 <__ieee754_pow+0x738>)
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	2000      	movs	r0, #0
 800540e:	4604      	mov	r4, r0
 8005410:	460d      	mov	r5, r1
 8005412:	f7fb f8f1 	bl	80005f8 <__aeabi_dmul>
 8005416:	4642      	mov	r2, r8
 8005418:	ec41 0b18 	vmov	d8, r0, r1
 800541c:	464b      	mov	r3, r9
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	f7fa ff31 	bl	8000288 <__aeabi_dsub>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4630      	mov	r0, r6
 800542c:	4639      	mov	r1, r7
 800542e:	f7fa ff2b 	bl	8000288 <__aeabi_dsub>
 8005432:	a335      	add	r3, pc, #212	; (adr r3, 8005508 <__ieee754_pow+0x740>)
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	f7fb f8de 	bl	80005f8 <__aeabi_dmul>
 800543c:	a334      	add	r3, pc, #208	; (adr r3, 8005510 <__ieee754_pow+0x748>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	4606      	mov	r6, r0
 8005444:	460f      	mov	r7, r1
 8005446:	4620      	mov	r0, r4
 8005448:	4629      	mov	r1, r5
 800544a:	f7fb f8d5 	bl	80005f8 <__aeabi_dmul>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	4630      	mov	r0, r6
 8005454:	4639      	mov	r1, r7
 8005456:	f7fa ff19 	bl	800028c <__adddf3>
 800545a:	9a07      	ldr	r2, [sp, #28]
 800545c:	4b37      	ldr	r3, [pc, #220]	; (800553c <__ieee754_pow+0x774>)
 800545e:	4413      	add	r3, r2
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f7fa ff12 	bl	800028c <__adddf3>
 8005468:	4682      	mov	sl, r0
 800546a:	9805      	ldr	r0, [sp, #20]
 800546c:	468b      	mov	fp, r1
 800546e:	f7fb f859 	bl	8000524 <__aeabi_i2d>
 8005472:	9a07      	ldr	r2, [sp, #28]
 8005474:	4b32      	ldr	r3, [pc, #200]	; (8005540 <__ieee754_pow+0x778>)
 8005476:	4413      	add	r3, r2
 8005478:	e9d3 8900 	ldrd	r8, r9, [r3]
 800547c:	4606      	mov	r6, r0
 800547e:	460f      	mov	r7, r1
 8005480:	4652      	mov	r2, sl
 8005482:	465b      	mov	r3, fp
 8005484:	ec51 0b18 	vmov	r0, r1, d8
 8005488:	f7fa ff00 	bl	800028c <__adddf3>
 800548c:	4642      	mov	r2, r8
 800548e:	464b      	mov	r3, r9
 8005490:	f7fa fefc 	bl	800028c <__adddf3>
 8005494:	4632      	mov	r2, r6
 8005496:	463b      	mov	r3, r7
 8005498:	f7fa fef8 	bl	800028c <__adddf3>
 800549c:	2000      	movs	r0, #0
 800549e:	4632      	mov	r2, r6
 80054a0:	463b      	mov	r3, r7
 80054a2:	4604      	mov	r4, r0
 80054a4:	460d      	mov	r5, r1
 80054a6:	f7fa feef 	bl	8000288 <__aeabi_dsub>
 80054aa:	4642      	mov	r2, r8
 80054ac:	464b      	mov	r3, r9
 80054ae:	f7fa feeb 	bl	8000288 <__aeabi_dsub>
 80054b2:	ec53 2b18 	vmov	r2, r3, d8
 80054b6:	f7fa fee7 	bl	8000288 <__aeabi_dsub>
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	4650      	mov	r0, sl
 80054c0:	4659      	mov	r1, fp
 80054c2:	e610      	b.n	80050e6 <__ieee754_pow+0x31e>
 80054c4:	2401      	movs	r4, #1
 80054c6:	e6a1      	b.n	800520c <__ieee754_pow+0x444>
 80054c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005518 <__ieee754_pow+0x750>
 80054cc:	e617      	b.n	80050fe <__ieee754_pow+0x336>
 80054ce:	bf00      	nop
 80054d0:	4a454eef 	.word	0x4a454eef
 80054d4:	3fca7e28 	.word	0x3fca7e28
 80054d8:	93c9db65 	.word	0x93c9db65
 80054dc:	3fcd864a 	.word	0x3fcd864a
 80054e0:	a91d4101 	.word	0xa91d4101
 80054e4:	3fd17460 	.word	0x3fd17460
 80054e8:	518f264d 	.word	0x518f264d
 80054ec:	3fd55555 	.word	0x3fd55555
 80054f0:	db6fabff 	.word	0xdb6fabff
 80054f4:	3fdb6db6 	.word	0x3fdb6db6
 80054f8:	33333303 	.word	0x33333303
 80054fc:	3fe33333 	.word	0x3fe33333
 8005500:	e0000000 	.word	0xe0000000
 8005504:	3feec709 	.word	0x3feec709
 8005508:	dc3a03fd 	.word	0xdc3a03fd
 800550c:	3feec709 	.word	0x3feec709
 8005510:	145b01f5 	.word	0x145b01f5
 8005514:	be3e2fe0 	.word	0xbe3e2fe0
 8005518:	00000000 	.word	0x00000000
 800551c:	3ff00000 	.word	0x3ff00000
 8005520:	7ff00000 	.word	0x7ff00000
 8005524:	43400000 	.word	0x43400000
 8005528:	0003988e 	.word	0x0003988e
 800552c:	000bb679 	.word	0x000bb679
 8005530:	08005b90 	.word	0x08005b90
 8005534:	3ff00000 	.word	0x3ff00000
 8005538:	40080000 	.word	0x40080000
 800553c:	08005bb0 	.word	0x08005bb0
 8005540:	08005ba0 	.word	0x08005ba0
 8005544:	a3b5      	add	r3, pc, #724	; (adr r3, 800581c <__ieee754_pow+0xa54>)
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	4640      	mov	r0, r8
 800554c:	4649      	mov	r1, r9
 800554e:	f7fa fe9d 	bl	800028c <__adddf3>
 8005552:	4622      	mov	r2, r4
 8005554:	ec41 0b1a 	vmov	d10, r0, r1
 8005558:	462b      	mov	r3, r5
 800555a:	4630      	mov	r0, r6
 800555c:	4639      	mov	r1, r7
 800555e:	f7fa fe93 	bl	8000288 <__aeabi_dsub>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	ec51 0b1a 	vmov	r0, r1, d10
 800556a:	f7fb fad5 	bl	8000b18 <__aeabi_dcmpgt>
 800556e:	2800      	cmp	r0, #0
 8005570:	f47f ae04 	bne.w	800517c <__ieee754_pow+0x3b4>
 8005574:	4aa4      	ldr	r2, [pc, #656]	; (8005808 <__ieee754_pow+0xa40>)
 8005576:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800557a:	4293      	cmp	r3, r2
 800557c:	f340 8108 	ble.w	8005790 <__ieee754_pow+0x9c8>
 8005580:	151b      	asrs	r3, r3, #20
 8005582:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005586:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800558a:	fa4a f303 	asr.w	r3, sl, r3
 800558e:	445b      	add	r3, fp
 8005590:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005594:	4e9d      	ldr	r6, [pc, #628]	; (800580c <__ieee754_pow+0xa44>)
 8005596:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800559a:	4116      	asrs	r6, r2
 800559c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80055a0:	2000      	movs	r0, #0
 80055a2:	ea23 0106 	bic.w	r1, r3, r6
 80055a6:	f1c2 0214 	rsb	r2, r2, #20
 80055aa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80055ae:	fa4a fa02 	asr.w	sl, sl, r2
 80055b2:	f1bb 0f00 	cmp.w	fp, #0
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4620      	mov	r0, r4
 80055bc:	4629      	mov	r1, r5
 80055be:	bfb8      	it	lt
 80055c0:	f1ca 0a00 	rsblt	sl, sl, #0
 80055c4:	f7fa fe60 	bl	8000288 <__aeabi_dsub>
 80055c8:	ec41 0b19 	vmov	d9, r0, r1
 80055cc:	4642      	mov	r2, r8
 80055ce:	464b      	mov	r3, r9
 80055d0:	ec51 0b19 	vmov	r0, r1, d9
 80055d4:	f7fa fe5a 	bl	800028c <__adddf3>
 80055d8:	a37b      	add	r3, pc, #492	; (adr r3, 80057c8 <__ieee754_pow+0xa00>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	2000      	movs	r0, #0
 80055e0:	4604      	mov	r4, r0
 80055e2:	460d      	mov	r5, r1
 80055e4:	f7fb f808 	bl	80005f8 <__aeabi_dmul>
 80055e8:	ec53 2b19 	vmov	r2, r3, d9
 80055ec:	4606      	mov	r6, r0
 80055ee:	460f      	mov	r7, r1
 80055f0:	4620      	mov	r0, r4
 80055f2:	4629      	mov	r1, r5
 80055f4:	f7fa fe48 	bl	8000288 <__aeabi_dsub>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4640      	mov	r0, r8
 80055fe:	4649      	mov	r1, r9
 8005600:	f7fa fe42 	bl	8000288 <__aeabi_dsub>
 8005604:	a372      	add	r3, pc, #456	; (adr r3, 80057d0 <__ieee754_pow+0xa08>)
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	f7fa fff5 	bl	80005f8 <__aeabi_dmul>
 800560e:	a372      	add	r3, pc, #456	; (adr r3, 80057d8 <__ieee754_pow+0xa10>)
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	4680      	mov	r8, r0
 8005616:	4689      	mov	r9, r1
 8005618:	4620      	mov	r0, r4
 800561a:	4629      	mov	r1, r5
 800561c:	f7fa ffec 	bl	80005f8 <__aeabi_dmul>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4640      	mov	r0, r8
 8005626:	4649      	mov	r1, r9
 8005628:	f7fa fe30 	bl	800028c <__adddf3>
 800562c:	4604      	mov	r4, r0
 800562e:	460d      	mov	r5, r1
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4630      	mov	r0, r6
 8005636:	4639      	mov	r1, r7
 8005638:	f7fa fe28 	bl	800028c <__adddf3>
 800563c:	4632      	mov	r2, r6
 800563e:	463b      	mov	r3, r7
 8005640:	4680      	mov	r8, r0
 8005642:	4689      	mov	r9, r1
 8005644:	f7fa fe20 	bl	8000288 <__aeabi_dsub>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4620      	mov	r0, r4
 800564e:	4629      	mov	r1, r5
 8005650:	f7fa fe1a 	bl	8000288 <__aeabi_dsub>
 8005654:	4642      	mov	r2, r8
 8005656:	4606      	mov	r6, r0
 8005658:	460f      	mov	r7, r1
 800565a:	464b      	mov	r3, r9
 800565c:	4640      	mov	r0, r8
 800565e:	4649      	mov	r1, r9
 8005660:	f7fa ffca 	bl	80005f8 <__aeabi_dmul>
 8005664:	a35e      	add	r3, pc, #376	; (adr r3, 80057e0 <__ieee754_pow+0xa18>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	4604      	mov	r4, r0
 800566c:	460d      	mov	r5, r1
 800566e:	f7fa ffc3 	bl	80005f8 <__aeabi_dmul>
 8005672:	a35d      	add	r3, pc, #372	; (adr r3, 80057e8 <__ieee754_pow+0xa20>)
 8005674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005678:	f7fa fe06 	bl	8000288 <__aeabi_dsub>
 800567c:	4622      	mov	r2, r4
 800567e:	462b      	mov	r3, r5
 8005680:	f7fa ffba 	bl	80005f8 <__aeabi_dmul>
 8005684:	a35a      	add	r3, pc, #360	; (adr r3, 80057f0 <__ieee754_pow+0xa28>)
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	f7fa fdff 	bl	800028c <__adddf3>
 800568e:	4622      	mov	r2, r4
 8005690:	462b      	mov	r3, r5
 8005692:	f7fa ffb1 	bl	80005f8 <__aeabi_dmul>
 8005696:	a358      	add	r3, pc, #352	; (adr r3, 80057f8 <__ieee754_pow+0xa30>)
 8005698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569c:	f7fa fdf4 	bl	8000288 <__aeabi_dsub>
 80056a0:	4622      	mov	r2, r4
 80056a2:	462b      	mov	r3, r5
 80056a4:	f7fa ffa8 	bl	80005f8 <__aeabi_dmul>
 80056a8:	a355      	add	r3, pc, #340	; (adr r3, 8005800 <__ieee754_pow+0xa38>)
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f7fa fded 	bl	800028c <__adddf3>
 80056b2:	4622      	mov	r2, r4
 80056b4:	462b      	mov	r3, r5
 80056b6:	f7fa ff9f 	bl	80005f8 <__aeabi_dmul>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4640      	mov	r0, r8
 80056c0:	4649      	mov	r1, r9
 80056c2:	f7fa fde1 	bl	8000288 <__aeabi_dsub>
 80056c6:	4604      	mov	r4, r0
 80056c8:	460d      	mov	r5, r1
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4640      	mov	r0, r8
 80056d0:	4649      	mov	r1, r9
 80056d2:	f7fa ff91 	bl	80005f8 <__aeabi_dmul>
 80056d6:	2200      	movs	r2, #0
 80056d8:	ec41 0b19 	vmov	d9, r0, r1
 80056dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056e0:	4620      	mov	r0, r4
 80056e2:	4629      	mov	r1, r5
 80056e4:	f7fa fdd0 	bl	8000288 <__aeabi_dsub>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	ec51 0b19 	vmov	r0, r1, d9
 80056f0:	f7fb f8ac 	bl	800084c <__aeabi_ddiv>
 80056f4:	4632      	mov	r2, r6
 80056f6:	4604      	mov	r4, r0
 80056f8:	460d      	mov	r5, r1
 80056fa:	463b      	mov	r3, r7
 80056fc:	4640      	mov	r0, r8
 80056fe:	4649      	mov	r1, r9
 8005700:	f7fa ff7a 	bl	80005f8 <__aeabi_dmul>
 8005704:	4632      	mov	r2, r6
 8005706:	463b      	mov	r3, r7
 8005708:	f7fa fdc0 	bl	800028c <__adddf3>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4620      	mov	r0, r4
 8005712:	4629      	mov	r1, r5
 8005714:	f7fa fdb8 	bl	8000288 <__aeabi_dsub>
 8005718:	4642      	mov	r2, r8
 800571a:	464b      	mov	r3, r9
 800571c:	f7fa fdb4 	bl	8000288 <__aeabi_dsub>
 8005720:	460b      	mov	r3, r1
 8005722:	4602      	mov	r2, r0
 8005724:	493a      	ldr	r1, [pc, #232]	; (8005810 <__ieee754_pow+0xa48>)
 8005726:	2000      	movs	r0, #0
 8005728:	f7fa fdae 	bl	8000288 <__aeabi_dsub>
 800572c:	ec41 0b10 	vmov	d0, r0, r1
 8005730:	ee10 3a90 	vmov	r3, s1
 8005734:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800573c:	da2b      	bge.n	8005796 <__ieee754_pow+0x9ce>
 800573e:	4650      	mov	r0, sl
 8005740:	f000 f966 	bl	8005a10 <scalbn>
 8005744:	ec51 0b10 	vmov	r0, r1, d0
 8005748:	ec53 2b18 	vmov	r2, r3, d8
 800574c:	f7ff bbed 	b.w	8004f2a <__ieee754_pow+0x162>
 8005750:	4b30      	ldr	r3, [pc, #192]	; (8005814 <__ieee754_pow+0xa4c>)
 8005752:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005756:	429e      	cmp	r6, r3
 8005758:	f77f af0c 	ble.w	8005574 <__ieee754_pow+0x7ac>
 800575c:	4b2e      	ldr	r3, [pc, #184]	; (8005818 <__ieee754_pow+0xa50>)
 800575e:	440b      	add	r3, r1
 8005760:	4303      	orrs	r3, r0
 8005762:	d009      	beq.n	8005778 <__ieee754_pow+0x9b0>
 8005764:	ec51 0b18 	vmov	r0, r1, d8
 8005768:	2200      	movs	r2, #0
 800576a:	2300      	movs	r3, #0
 800576c:	f7fb f9b6 	bl	8000adc <__aeabi_dcmplt>
 8005770:	3800      	subs	r0, #0
 8005772:	bf18      	it	ne
 8005774:	2001      	movne	r0, #1
 8005776:	e447      	b.n	8005008 <__ieee754_pow+0x240>
 8005778:	4622      	mov	r2, r4
 800577a:	462b      	mov	r3, r5
 800577c:	f7fa fd84 	bl	8000288 <__aeabi_dsub>
 8005780:	4642      	mov	r2, r8
 8005782:	464b      	mov	r3, r9
 8005784:	f7fb f9be 	bl	8000b04 <__aeabi_dcmpge>
 8005788:	2800      	cmp	r0, #0
 800578a:	f43f aef3 	beq.w	8005574 <__ieee754_pow+0x7ac>
 800578e:	e7e9      	b.n	8005764 <__ieee754_pow+0x99c>
 8005790:	f04f 0a00 	mov.w	sl, #0
 8005794:	e71a      	b.n	80055cc <__ieee754_pow+0x804>
 8005796:	ec51 0b10 	vmov	r0, r1, d0
 800579a:	4619      	mov	r1, r3
 800579c:	e7d4      	b.n	8005748 <__ieee754_pow+0x980>
 800579e:	491c      	ldr	r1, [pc, #112]	; (8005810 <__ieee754_pow+0xa48>)
 80057a0:	2000      	movs	r0, #0
 80057a2:	f7ff bb30 	b.w	8004e06 <__ieee754_pow+0x3e>
 80057a6:	2000      	movs	r0, #0
 80057a8:	2100      	movs	r1, #0
 80057aa:	f7ff bb2c 	b.w	8004e06 <__ieee754_pow+0x3e>
 80057ae:	4630      	mov	r0, r6
 80057b0:	4639      	mov	r1, r7
 80057b2:	f7ff bb28 	b.w	8004e06 <__ieee754_pow+0x3e>
 80057b6:	9204      	str	r2, [sp, #16]
 80057b8:	f7ff bb7a 	b.w	8004eb0 <__ieee754_pow+0xe8>
 80057bc:	2300      	movs	r3, #0
 80057be:	f7ff bb64 	b.w	8004e8a <__ieee754_pow+0xc2>
 80057c2:	bf00      	nop
 80057c4:	f3af 8000 	nop.w
 80057c8:	00000000 	.word	0x00000000
 80057cc:	3fe62e43 	.word	0x3fe62e43
 80057d0:	fefa39ef 	.word	0xfefa39ef
 80057d4:	3fe62e42 	.word	0x3fe62e42
 80057d8:	0ca86c39 	.word	0x0ca86c39
 80057dc:	be205c61 	.word	0xbe205c61
 80057e0:	72bea4d0 	.word	0x72bea4d0
 80057e4:	3e663769 	.word	0x3e663769
 80057e8:	c5d26bf1 	.word	0xc5d26bf1
 80057ec:	3ebbbd41 	.word	0x3ebbbd41
 80057f0:	af25de2c 	.word	0xaf25de2c
 80057f4:	3f11566a 	.word	0x3f11566a
 80057f8:	16bebd93 	.word	0x16bebd93
 80057fc:	3f66c16c 	.word	0x3f66c16c
 8005800:	5555553e 	.word	0x5555553e
 8005804:	3fc55555 	.word	0x3fc55555
 8005808:	3fe00000 	.word	0x3fe00000
 800580c:	000fffff 	.word	0x000fffff
 8005810:	3ff00000 	.word	0x3ff00000
 8005814:	4090cbff 	.word	0x4090cbff
 8005818:	3f6f3400 	.word	0x3f6f3400
 800581c:	652b82fe 	.word	0x652b82fe
 8005820:	3c971547 	.word	0x3c971547

08005824 <__ieee754_sqrt>:
 8005824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	ec55 4b10 	vmov	r4, r5, d0
 800582c:	4e55      	ldr	r6, [pc, #340]	; (8005984 <__ieee754_sqrt+0x160>)
 800582e:	43ae      	bics	r6, r5
 8005830:	ee10 0a10 	vmov	r0, s0
 8005834:	ee10 3a10 	vmov	r3, s0
 8005838:	462a      	mov	r2, r5
 800583a:	4629      	mov	r1, r5
 800583c:	d110      	bne.n	8005860 <__ieee754_sqrt+0x3c>
 800583e:	ee10 2a10 	vmov	r2, s0
 8005842:	462b      	mov	r3, r5
 8005844:	f7fa fed8 	bl	80005f8 <__aeabi_dmul>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4620      	mov	r0, r4
 800584e:	4629      	mov	r1, r5
 8005850:	f7fa fd1c 	bl	800028c <__adddf3>
 8005854:	4604      	mov	r4, r0
 8005856:	460d      	mov	r5, r1
 8005858:	ec45 4b10 	vmov	d0, r4, r5
 800585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005860:	2d00      	cmp	r5, #0
 8005862:	dc10      	bgt.n	8005886 <__ieee754_sqrt+0x62>
 8005864:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005868:	4330      	orrs	r0, r6
 800586a:	d0f5      	beq.n	8005858 <__ieee754_sqrt+0x34>
 800586c:	b15d      	cbz	r5, 8005886 <__ieee754_sqrt+0x62>
 800586e:	ee10 2a10 	vmov	r2, s0
 8005872:	462b      	mov	r3, r5
 8005874:	ee10 0a10 	vmov	r0, s0
 8005878:	f7fa fd06 	bl	8000288 <__aeabi_dsub>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	f7fa ffe4 	bl	800084c <__aeabi_ddiv>
 8005884:	e7e6      	b.n	8005854 <__ieee754_sqrt+0x30>
 8005886:	1512      	asrs	r2, r2, #20
 8005888:	d074      	beq.n	8005974 <__ieee754_sqrt+0x150>
 800588a:	07d4      	lsls	r4, r2, #31
 800588c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005890:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005898:	bf5e      	ittt	pl
 800589a:	0fda      	lsrpl	r2, r3, #31
 800589c:	005b      	lslpl	r3, r3, #1
 800589e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80058a2:	2400      	movs	r4, #0
 80058a4:	0fda      	lsrs	r2, r3, #31
 80058a6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80058aa:	107f      	asrs	r7, r7, #1
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	2516      	movs	r5, #22
 80058b0:	4620      	mov	r0, r4
 80058b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80058b6:	1886      	adds	r6, r0, r2
 80058b8:	428e      	cmp	r6, r1
 80058ba:	bfde      	ittt	le
 80058bc:	1b89      	suble	r1, r1, r6
 80058be:	18b0      	addle	r0, r6, r2
 80058c0:	18a4      	addle	r4, r4, r2
 80058c2:	0049      	lsls	r1, r1, #1
 80058c4:	3d01      	subs	r5, #1
 80058c6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80058ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80058ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80058d2:	d1f0      	bne.n	80058b6 <__ieee754_sqrt+0x92>
 80058d4:	462a      	mov	r2, r5
 80058d6:	f04f 0e20 	mov.w	lr, #32
 80058da:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80058de:	4281      	cmp	r1, r0
 80058e0:	eb06 0c05 	add.w	ip, r6, r5
 80058e4:	dc02      	bgt.n	80058ec <__ieee754_sqrt+0xc8>
 80058e6:	d113      	bne.n	8005910 <__ieee754_sqrt+0xec>
 80058e8:	459c      	cmp	ip, r3
 80058ea:	d811      	bhi.n	8005910 <__ieee754_sqrt+0xec>
 80058ec:	f1bc 0f00 	cmp.w	ip, #0
 80058f0:	eb0c 0506 	add.w	r5, ip, r6
 80058f4:	da43      	bge.n	800597e <__ieee754_sqrt+0x15a>
 80058f6:	2d00      	cmp	r5, #0
 80058f8:	db41      	blt.n	800597e <__ieee754_sqrt+0x15a>
 80058fa:	f100 0801 	add.w	r8, r0, #1
 80058fe:	1a09      	subs	r1, r1, r0
 8005900:	459c      	cmp	ip, r3
 8005902:	bf88      	it	hi
 8005904:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005908:	eba3 030c 	sub.w	r3, r3, ip
 800590c:	4432      	add	r2, r6
 800590e:	4640      	mov	r0, r8
 8005910:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005914:	f1be 0e01 	subs.w	lr, lr, #1
 8005918:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800591c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005920:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005924:	d1db      	bne.n	80058de <__ieee754_sqrt+0xba>
 8005926:	430b      	orrs	r3, r1
 8005928:	d006      	beq.n	8005938 <__ieee754_sqrt+0x114>
 800592a:	1c50      	adds	r0, r2, #1
 800592c:	bf13      	iteet	ne
 800592e:	3201      	addne	r2, #1
 8005930:	3401      	addeq	r4, #1
 8005932:	4672      	moveq	r2, lr
 8005934:	f022 0201 	bicne.w	r2, r2, #1
 8005938:	1063      	asrs	r3, r4, #1
 800593a:	0852      	lsrs	r2, r2, #1
 800593c:	07e1      	lsls	r1, r4, #31
 800593e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005942:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005946:	bf48      	it	mi
 8005948:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800594c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005950:	4614      	mov	r4, r2
 8005952:	e781      	b.n	8005858 <__ieee754_sqrt+0x34>
 8005954:	0ad9      	lsrs	r1, r3, #11
 8005956:	3815      	subs	r0, #21
 8005958:	055b      	lsls	r3, r3, #21
 800595a:	2900      	cmp	r1, #0
 800595c:	d0fa      	beq.n	8005954 <__ieee754_sqrt+0x130>
 800595e:	02cd      	lsls	r5, r1, #11
 8005960:	d50a      	bpl.n	8005978 <__ieee754_sqrt+0x154>
 8005962:	f1c2 0420 	rsb	r4, r2, #32
 8005966:	fa23 f404 	lsr.w	r4, r3, r4
 800596a:	1e55      	subs	r5, r2, #1
 800596c:	4093      	lsls	r3, r2
 800596e:	4321      	orrs	r1, r4
 8005970:	1b42      	subs	r2, r0, r5
 8005972:	e78a      	b.n	800588a <__ieee754_sqrt+0x66>
 8005974:	4610      	mov	r0, r2
 8005976:	e7f0      	b.n	800595a <__ieee754_sqrt+0x136>
 8005978:	0049      	lsls	r1, r1, #1
 800597a:	3201      	adds	r2, #1
 800597c:	e7ef      	b.n	800595e <__ieee754_sqrt+0x13a>
 800597e:	4680      	mov	r8, r0
 8005980:	e7bd      	b.n	80058fe <__ieee754_sqrt+0xda>
 8005982:	bf00      	nop
 8005984:	7ff00000 	.word	0x7ff00000

08005988 <with_errno>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	4604      	mov	r4, r0
 800598c:	460d      	mov	r5, r1
 800598e:	4616      	mov	r6, r2
 8005990:	f7fe fd0a 	bl	80043a8 <__errno>
 8005994:	4629      	mov	r1, r5
 8005996:	6006      	str	r6, [r0, #0]
 8005998:	4620      	mov	r0, r4
 800599a:	bd70      	pop	{r4, r5, r6, pc}

0800599c <xflow>:
 800599c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800599e:	4614      	mov	r4, r2
 80059a0:	461d      	mov	r5, r3
 80059a2:	b108      	cbz	r0, 80059a8 <xflow+0xc>
 80059a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80059a8:	e9cd 2300 	strd	r2, r3, [sp]
 80059ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059b0:	4620      	mov	r0, r4
 80059b2:	4629      	mov	r1, r5
 80059b4:	f7fa fe20 	bl	80005f8 <__aeabi_dmul>
 80059b8:	2222      	movs	r2, #34	; 0x22
 80059ba:	b003      	add	sp, #12
 80059bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059c0:	f7ff bfe2 	b.w	8005988 <with_errno>

080059c4 <__math_uflow>:
 80059c4:	b508      	push	{r3, lr}
 80059c6:	2200      	movs	r2, #0
 80059c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80059cc:	f7ff ffe6 	bl	800599c <xflow>
 80059d0:	ec41 0b10 	vmov	d0, r0, r1
 80059d4:	bd08      	pop	{r3, pc}

080059d6 <__math_oflow>:
 80059d6:	b508      	push	{r3, lr}
 80059d8:	2200      	movs	r2, #0
 80059da:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80059de:	f7ff ffdd 	bl	800599c <xflow>
 80059e2:	ec41 0b10 	vmov	d0, r0, r1
 80059e6:	bd08      	pop	{r3, pc}

080059e8 <fabs>:
 80059e8:	ec51 0b10 	vmov	r0, r1, d0
 80059ec:	ee10 2a10 	vmov	r2, s0
 80059f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80059f4:	ec43 2b10 	vmov	d0, r2, r3
 80059f8:	4770      	bx	lr

080059fa <finite>:
 80059fa:	b082      	sub	sp, #8
 80059fc:	ed8d 0b00 	vstr	d0, [sp]
 8005a00:	9801      	ldr	r0, [sp, #4]
 8005a02:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005a06:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005a0a:	0fc0      	lsrs	r0, r0, #31
 8005a0c:	b002      	add	sp, #8
 8005a0e:	4770      	bx	lr

08005a10 <scalbn>:
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	ec55 4b10 	vmov	r4, r5, d0
 8005a16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	462b      	mov	r3, r5
 8005a1e:	b99a      	cbnz	r2, 8005a48 <scalbn+0x38>
 8005a20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005a24:	4323      	orrs	r3, r4
 8005a26:	d036      	beq.n	8005a96 <scalbn+0x86>
 8005a28:	4b39      	ldr	r3, [pc, #228]	; (8005b10 <scalbn+0x100>)
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	ee10 0a10 	vmov	r0, s0
 8005a30:	2200      	movs	r2, #0
 8005a32:	f7fa fde1 	bl	80005f8 <__aeabi_dmul>
 8005a36:	4b37      	ldr	r3, [pc, #220]	; (8005b14 <scalbn+0x104>)
 8005a38:	429e      	cmp	r6, r3
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	460d      	mov	r5, r1
 8005a3e:	da10      	bge.n	8005a62 <scalbn+0x52>
 8005a40:	a32b      	add	r3, pc, #172	; (adr r3, 8005af0 <scalbn+0xe0>)
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	e03a      	b.n	8005abe <scalbn+0xae>
 8005a48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005a4c:	428a      	cmp	r2, r1
 8005a4e:	d10c      	bne.n	8005a6a <scalbn+0x5a>
 8005a50:	ee10 2a10 	vmov	r2, s0
 8005a54:	4620      	mov	r0, r4
 8005a56:	4629      	mov	r1, r5
 8005a58:	f7fa fc18 	bl	800028c <__adddf3>
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	460d      	mov	r5, r1
 8005a60:	e019      	b.n	8005a96 <scalbn+0x86>
 8005a62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005a66:	460b      	mov	r3, r1
 8005a68:	3a36      	subs	r2, #54	; 0x36
 8005a6a:	4432      	add	r2, r6
 8005a6c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005a70:	428a      	cmp	r2, r1
 8005a72:	dd08      	ble.n	8005a86 <scalbn+0x76>
 8005a74:	2d00      	cmp	r5, #0
 8005a76:	a120      	add	r1, pc, #128	; (adr r1, 8005af8 <scalbn+0xe8>)
 8005a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a7c:	da1c      	bge.n	8005ab8 <scalbn+0xa8>
 8005a7e:	a120      	add	r1, pc, #128	; (adr r1, 8005b00 <scalbn+0xf0>)
 8005a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a84:	e018      	b.n	8005ab8 <scalbn+0xa8>
 8005a86:	2a00      	cmp	r2, #0
 8005a88:	dd08      	ble.n	8005a9c <scalbn+0x8c>
 8005a8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005a8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005a96:	ec45 4b10 	vmov	d0, r4, r5
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}
 8005a9c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005aa0:	da19      	bge.n	8005ad6 <scalbn+0xc6>
 8005aa2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005aa6:	429e      	cmp	r6, r3
 8005aa8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005aac:	dd0a      	ble.n	8005ac4 <scalbn+0xb4>
 8005aae:	a112      	add	r1, pc, #72	; (adr r1, 8005af8 <scalbn+0xe8>)
 8005ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e2      	bne.n	8005a7e <scalbn+0x6e>
 8005ab8:	a30f      	add	r3, pc, #60	; (adr r3, 8005af8 <scalbn+0xe8>)
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	f7fa fd9b 	bl	80005f8 <__aeabi_dmul>
 8005ac2:	e7cb      	b.n	8005a5c <scalbn+0x4c>
 8005ac4:	a10a      	add	r1, pc, #40	; (adr r1, 8005af0 <scalbn+0xe0>)
 8005ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0b8      	beq.n	8005a40 <scalbn+0x30>
 8005ace:	a10e      	add	r1, pc, #56	; (adr r1, 8005b08 <scalbn+0xf8>)
 8005ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ad4:	e7b4      	b.n	8005a40 <scalbn+0x30>
 8005ad6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ada:	3236      	adds	r2, #54	; 0x36
 8005adc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ae0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <scalbn+0x108>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	e7e8      	b.n	8005abe <scalbn+0xae>
 8005aec:	f3af 8000 	nop.w
 8005af0:	c2f8f359 	.word	0xc2f8f359
 8005af4:	01a56e1f 	.word	0x01a56e1f
 8005af8:	8800759c 	.word	0x8800759c
 8005afc:	7e37e43c 	.word	0x7e37e43c
 8005b00:	8800759c 	.word	0x8800759c
 8005b04:	fe37e43c 	.word	0xfe37e43c
 8005b08:	c2f8f359 	.word	0xc2f8f359
 8005b0c:	81a56e1f 	.word	0x81a56e1f
 8005b10:	43500000 	.word	0x43500000
 8005b14:	ffff3cb0 	.word	0xffff3cb0
 8005b18:	3c900000 	.word	0x3c900000

08005b1c <_init>:
 8005b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1e:	bf00      	nop
 8005b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b22:	bc08      	pop	{r3}
 8005b24:	469e      	mov	lr, r3
 8005b26:	4770      	bx	lr

08005b28 <_fini>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr
